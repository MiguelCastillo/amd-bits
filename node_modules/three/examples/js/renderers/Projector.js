'use strict';

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author julianwa / https://github.com/julianwa
 */

THREE.RenderableObject = function () {

		this.id = 0;

		this.object = null;
		this.z = 0;
		this.renderOrder = 0;
};

//

THREE.RenderableFace = function () {

		this.id = 0;

		this.v1 = new THREE.RenderableVertex();
		this.v2 = new THREE.RenderableVertex();
		this.v3 = new THREE.RenderableVertex();

		this.normalModel = new THREE.Vector3();

		this.vertexNormalsModel = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];
		this.vertexNormalsLength = 0;

		this.color = new THREE.Color();
		this.material = null;
		this.uvs = [new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2()];

		this.z = 0;
		this.renderOrder = 0;
};

//

THREE.RenderableVertex = function () {

		this.position = new THREE.Vector3();
		this.positionWorld = new THREE.Vector3();
		this.positionScreen = new THREE.Vector4();

		this.visible = true;
};

THREE.RenderableVertex.prototype.copy = function (vertex) {

		this.positionWorld.copy(vertex.positionWorld);
		this.positionScreen.copy(vertex.positionScreen);
};

//

THREE.RenderableLine = function () {

		this.id = 0;

		this.v1 = new THREE.RenderableVertex();
		this.v2 = new THREE.RenderableVertex();

		this.vertexColors = [new THREE.Color(), new THREE.Color()];
		this.material = null;

		this.z = 0;
		this.renderOrder = 0;
};

//

THREE.RenderableSprite = function () {

		this.id = 0;

		this.object = null;

		this.x = 0;
		this.y = 0;
		this.z = 0;

		this.rotation = 0;
		this.scale = new THREE.Vector2();

		this.material = null;
		this.renderOrder = 0;
};

//

THREE.Projector = function () {

		var _object,
		    _objectCount,
		    _objectPool = [],
		    _objectPoolLength = 0,
		    _vertex,
		    _vertexCount,
		    _vertexPool = [],
		    _vertexPoolLength = 0,
		    _face,
		    _faceCount,
		    _facePool = [],
		    _facePoolLength = 0,
		    _line,
		    _lineCount,
		    _linePool = [],
		    _linePoolLength = 0,
		    _sprite,
		    _spriteCount,
		    _spritePool = [],
		    _spritePoolLength = 0,
		    _renderData = { objects: [], lights: [], elements: [] },
		    _vector3 = new THREE.Vector3(),
		    _vector4 = new THREE.Vector4(),
		    _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)),
		    _boundingBox = new THREE.Box3(),
		    _points3 = new Array(3),
		    _points4 = new Array(4),
		    _viewMatrix = new THREE.Matrix4(),
		    _viewProjectionMatrix = new THREE.Matrix4(),
		    _modelMatrix,
		    _modelViewProjectionMatrix = new THREE.Matrix4(),
		    _normalMatrix = new THREE.Matrix3(),
		    _frustum = new THREE.Frustum(),
		    _clippedVertex1PositionScreen = new THREE.Vector4(),
		    _clippedVertex2PositionScreen = new THREE.Vector4();

		//

		this.projectVector = function (vector, camera) {

				console.warn('THREE.Projector: .projectVector() is now vector.project().');
				vector.project(camera);
		};

		this.unprojectVector = function (vector, camera) {

				console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');
				vector.unproject(camera);
		};

		this.pickingRay = function (vector, camera) {

				console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');
		};

		//

		var RenderList = function RenderList() {

				var normals = [];
				var uvs = [];

				var object = null;
				var material = null;

				var normalMatrix = new THREE.Matrix3();

				var setObject = function setObject(value) {

						object = value;
						material = object.material;

						normalMatrix.getNormalMatrix(object.matrixWorld);

						normals.length = 0;
						uvs.length = 0;
				};

				var projectVertex = function projectVertex(vertex) {

						var position = vertex.position;
						var positionWorld = vertex.positionWorld;
						var positionScreen = vertex.positionScreen;

						positionWorld.copy(position).applyMatrix4(_modelMatrix);
						positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);

						var invW = 1 / positionScreen.w;

						positionScreen.x *= invW;
						positionScreen.y *= invW;
						positionScreen.z *= invW;

						vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;
				};

				var pushVertex = function pushVertex(x, y, z) {

						_vertex = getNextVertexInPool();
						_vertex.position.set(x, y, z);

						projectVertex(_vertex);
				};

				var pushNormal = function pushNormal(x, y, z) {

						normals.push(x, y, z);
				};

				var pushUv = function pushUv(x, y) {

						uvs.push(x, y);
				};

				var checkTriangleVisibility = function checkTriangleVisibility(v1, v2, v3) {

						if (v1.visible === true || v2.visible === true || v3.visible === true) return true;

						_points3[0] = v1.positionScreen;
						_points3[1] = v2.positionScreen;
						_points3[2] = v3.positionScreen;

						return _clipBox.isIntersectionBox(_boundingBox.setFromPoints(_points3));
				};

				var checkBackfaceCulling = function checkBackfaceCulling(v1, v2, v3) {

						return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;
				};

				var pushLine = function pushLine(a, b) {

						var v1 = _vertexPool[a];
						var v2 = _vertexPool[b];

						_line = getNextLineInPool();

						_line.id = object.id;
						_line.v1.copy(v1);
						_line.v2.copy(v2);
						_line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;
						_line.renderOrder = object.renderOrder;

						_line.material = object.material;

						_renderData.elements.push(_line);
				};

				var pushTriangle = function pushTriangle(a, b, c) {

						var v1 = _vertexPool[a];
						var v2 = _vertexPool[b];
						var v3 = _vertexPool[c];

						if (checkTriangleVisibility(v1, v2, v3) === false) return;

						if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {

								_face = getNextFaceInPool();

								_face.id = object.id;
								_face.v1.copy(v1);
								_face.v2.copy(v2);
								_face.v3.copy(v3);
								_face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;
								_face.renderOrder = object.renderOrder;

								// use first vertex normal as face normal

								_face.normalModel.fromArray(normals, a * 3);
								_face.normalModel.applyMatrix3(normalMatrix).normalize();

								for (var i = 0; i < 3; i++) {

										var normal = _face.vertexNormalsModel[i];
										normal.fromArray(normals, arguments[i] * 3);
										normal.applyMatrix3(normalMatrix).normalize();

										var uv = _face.uvs[i];
										uv.fromArray(uvs, arguments[i] * 2);
								}

								_face.vertexNormalsLength = 3;

								_face.material = object.material;

								_renderData.elements.push(_face);
						}
				};

				return {
						setObject: setObject,
						projectVertex: projectVertex,
						checkTriangleVisibility: checkTriangleVisibility,
						checkBackfaceCulling: checkBackfaceCulling,
						pushVertex: pushVertex,
						pushNormal: pushNormal,
						pushUv: pushUv,
						pushLine: pushLine,
						pushTriangle: pushTriangle
				};
		};

		var renderList = new RenderList();

		this.projectScene = function (scene, camera, sortObjects, sortElements) {

				_faceCount = 0;
				_lineCount = 0;
				_spriteCount = 0;

				_renderData.elements.length = 0;

				if (scene.autoUpdate === true) scene.updateMatrixWorld();
				if (camera.parent === null) camera.updateMatrixWorld();

				_viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));
				_viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);

				_frustum.setFromMatrix(_viewProjectionMatrix);

				//

				_objectCount = 0;

				_renderData.objects.length = 0;
				_renderData.lights.length = 0;

				scene.traverseVisible(function (object) {

						if (object instanceof THREE.Light) {

								_renderData.lights.push(object);
						} else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {

								var material = object.material;

								if (material.visible === false) return;

								if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {

										_object = getNextObjectInPool();
										_object.id = object.id;
										_object.object = object;

										_vector3.setFromMatrixPosition(object.matrixWorld);
										_vector3.applyProjection(_viewProjectionMatrix);
										_object.z = _vector3.z;
										_object.renderOrder = object.renderOrder;

										_renderData.objects.push(_object);
								}
						}
				});

				if (sortObjects === true) {

						_renderData.objects.sort(painterSort);
				}

				//

				for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {

						var object = _renderData.objects[o].object;
						var geometry = object.geometry;

						renderList.setObject(object);

						_modelMatrix = object.matrixWorld;

						_vertexCount = 0;

						if (object instanceof THREE.Mesh) {

								if (geometry instanceof THREE.BufferGeometry) {

										var attributes = geometry.attributes;
										var groups = geometry.groups;

										if (attributes.position === undefined) continue;

										var positions = attributes.position.array;

										for (var i = 0, l = positions.length; i < l; i += 3) {

												renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);
										}

										if (attributes.normal !== undefined) {

												var normals = attributes.normal.array;

												for (var i = 0, l = normals.length; i < l; i += 3) {

														renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);
												}
										}

										if (attributes.uv !== undefined) {

												var uvs = attributes.uv.array;

												for (var i = 0, l = uvs.length; i < l; i += 2) {

														renderList.pushUv(uvs[i], uvs[i + 1]);
												}
										}

										if (geometry.index !== null) {

												var indices = geometry.index.array;

												if (groups.length > 0) {

														for (var o = 0; o < groups.length; o++) {

																var group = groups[o];

																for (var i = group.start, l = group.start + group.count; i < l; i += 3) {

																		renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);
																}
														}
												} else {

														for (var i = 0, l = indices.length; i < l; i += 3) {

																renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);
														}
												}
										} else {

												for (var i = 0, l = positions.length / 3; i < l; i += 3) {

														renderList.pushTriangle(i, i + 1, i + 2);
												}
										}
								} else if (geometry instanceof THREE.Geometry) {

										var vertices = geometry.vertices;
										var faces = geometry.faces;
										var faceVertexUvs = geometry.faceVertexUvs[0];

										_normalMatrix.getNormalMatrix(_modelMatrix);

										var material = object.material;

										var isFaceMaterial = material instanceof THREE.MeshFaceMaterial;
										var objectMaterials = isFaceMaterial === true ? object.material : null;

										for (var v = 0, vl = vertices.length; v < vl; v++) {

												var vertex = vertices[v];

												_vector3.copy(vertex);

												if (material.morphTargets === true) {

														var morphTargets = geometry.morphTargets;
														var morphInfluences = object.morphTargetInfluences;

														for (var t = 0, tl = morphTargets.length; t < tl; t++) {

																var influence = morphInfluences[t];

																if (influence === 0) continue;

																var target = morphTargets[t];
																var targetVertex = target.vertices[v];

																_vector3.x += (targetVertex.x - vertex.x) * influence;
																_vector3.y += (targetVertex.y - vertex.y) * influence;
																_vector3.z += (targetVertex.z - vertex.z) * influence;
														}
												}

												renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);
										}

										for (var f = 0, fl = faces.length; f < fl; f++) {

												var face = faces[f];

												material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;

												if (material === undefined) continue;

												var side = material.side;

												var v1 = _vertexPool[face.a];
												var v2 = _vertexPool[face.b];
												var v3 = _vertexPool[face.c];

												if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;

												var visible = renderList.checkBackfaceCulling(v1, v2, v3);

												if (side !== THREE.DoubleSide) {

														if (side === THREE.FrontSide && visible === false) continue;
														if (side === THREE.BackSide && visible === true) continue;
												}

												_face = getNextFaceInPool();

												_face.id = object.id;
												_face.v1.copy(v1);
												_face.v2.copy(v2);
												_face.v3.copy(v3);

												_face.normalModel.copy(face.normal);

												if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {

														_face.normalModel.negate();
												}

												_face.normalModel.applyMatrix3(_normalMatrix).normalize();

												var faceVertexNormals = face.vertexNormals;

												for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {

														var normalModel = _face.vertexNormalsModel[n];
														normalModel.copy(faceVertexNormals[n]);

														if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {

																normalModel.negate();
														}

														normalModel.applyMatrix3(_normalMatrix).normalize();
												}

												_face.vertexNormalsLength = faceVertexNormals.length;

												var vertexUvs = faceVertexUvs[f];

												if (vertexUvs !== undefined) {

														for (var u = 0; u < 3; u++) {

																_face.uvs[u].copy(vertexUvs[u]);
														}
												}

												_face.color = face.color;
												_face.material = material;

												_face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;
												_face.renderOrder = object.renderOrder;

												_renderData.elements.push(_face);
										}
								}
						} else if (object instanceof THREE.Line) {

								if (geometry instanceof THREE.BufferGeometry) {

										var attributes = geometry.attributes;

										if (attributes.position !== undefined) {

												var positions = attributes.position.array;

												for (var i = 0, l = positions.length; i < l; i += 3) {

														renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);
												}

												if (geometry.index !== null) {

														var indices = geometry.index.array;

														for (var i = 0, l = indices.length; i < l; i += 2) {

																renderList.pushLine(indices[i], indices[i + 1]);
														}
												} else {

														var step = object instanceof THREE.LineSegments ? 2 : 1;

														for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {

																renderList.pushLine(i, i + 1);
														}
												}
										}
								} else if (geometry instanceof THREE.Geometry) {

										_modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);

										var vertices = object.geometry.vertices;

										if (vertices.length === 0) continue;

										v1 = getNextVertexInPool();
										v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);

										var step = object instanceof THREE.LineSegments ? 2 : 1;

										for (var v = 1, vl = vertices.length; v < vl; v++) {

												v1 = getNextVertexInPool();
												v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);

												if ((v + 1) % step > 0) continue;

												v2 = _vertexPool[_vertexCount - 2];

												_clippedVertex1PositionScreen.copy(v1.positionScreen);
												_clippedVertex2PositionScreen.copy(v2.positionScreen);

												if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {

														// Perform the perspective divide
														_clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);
														_clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);

														_line = getNextLineInPool();

														_line.id = object.id;
														_line.v1.positionScreen.copy(_clippedVertex1PositionScreen);
														_line.v2.positionScreen.copy(_clippedVertex2PositionScreen);

														_line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);
														_line.renderOrder = object.renderOrder;

														_line.material = object.material;

														if (object.material.vertexColors === THREE.VertexColors) {

																_line.vertexColors[0].copy(object.geometry.colors[v]);
																_line.vertexColors[1].copy(object.geometry.colors[v - 1]);
														}

														_renderData.elements.push(_line);
												}
										}
								}
						} else if (object instanceof THREE.Sprite) {

								_vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);
								_vector4.applyMatrix4(_viewProjectionMatrix);

								var invW = 1 / _vector4.w;

								_vector4.z *= invW;

								if (_vector4.z >= -1 && _vector4.z <= 1) {

										_sprite = getNextSpriteInPool();
										_sprite.id = object.id;
										_sprite.x = _vector4.x * invW;
										_sprite.y = _vector4.y * invW;
										_sprite.z = _vector4.z;
										_sprite.renderOrder = object.renderOrder;
										_sprite.object = object;

										_sprite.rotation = object.rotation;

										_sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));
										_sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));

										_sprite.material = object.material;

										_renderData.elements.push(_sprite);
								}
						}
				}

				if (sortElements === true) {

						_renderData.elements.sort(painterSort);
				}

				return _renderData;
		};

		// Pools

		function getNextObjectInPool() {

				if (_objectCount === _objectPoolLength) {

						var object = new THREE.RenderableObject();
						_objectPool.push(object);
						_objectPoolLength++;
						_objectCount++;
						return object;
				}

				return _objectPool[_objectCount++];
		}

		function getNextVertexInPool() {

				if (_vertexCount === _vertexPoolLength) {

						var vertex = new THREE.RenderableVertex();
						_vertexPool.push(vertex);
						_vertexPoolLength++;
						_vertexCount++;
						return vertex;
				}

				return _vertexPool[_vertexCount++];
		}

		function getNextFaceInPool() {

				if (_faceCount === _facePoolLength) {

						var face = new THREE.RenderableFace();
						_facePool.push(face);
						_facePoolLength++;
						_faceCount++;
						return face;
				}

				return _facePool[_faceCount++];
		}

		function getNextLineInPool() {

				if (_lineCount === _linePoolLength) {

						var line = new THREE.RenderableLine();
						_linePool.push(line);
						_linePoolLength++;
						_lineCount++;
						return line;
				}

				return _linePool[_lineCount++];
		}

		function getNextSpriteInPool() {

				if (_spriteCount === _spritePoolLength) {

						var sprite = new THREE.RenderableSprite();
						_spritePool.push(sprite);
						_spritePoolLength++;
						_spriteCount++;
						return sprite;
				}

				return _spritePool[_spriteCount++];
		}

		//

		function painterSort(a, b) {

				if (a.renderOrder !== b.renderOrder) {

						return a.renderOrder - b.renderOrder;
				} else if (a.z !== b.z) {

						return b.z - a.z;
				} else if (a.id !== b.id) {

						return a.id - b.id;
				} else {

						return 0;
				}
		}

		function clipLine(s1, s2) {

				var alpha1 = 0,
				    alpha2 = 1,
				   

				// Calculate the boundary coordinate of each vertex for the near and far clip planes,
				// Z = -1 and Z = +1, respectively.
				bc1near = s1.z + s1.w,
				    bc2near = s2.z + s2.w,
				    bc1far = -s1.z + s1.w,
				    bc2far = -s2.z + s2.w;

				if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {

						// Both vertices lie entirely within all clip planes.
						return true;
				} else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {

						// Both vertices lie entirely outside one of the clip planes.
						return false;
				} else {

						// The line segment spans at least one clip plane.

						if (bc1near < 0) {

								// v1 lies outside the near plane, v2 inside
								alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));
						} else if (bc2near < 0) {

								// v2 lies outside the near plane, v1 inside
								alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));
						}

						if (bc1far < 0) {

								// v1 lies outside the far plane, v2 inside
								alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));
						} else if (bc2far < 0) {

								// v2 lies outside the far plane, v2 inside
								alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));
						}

						if (alpha2 < alpha1) {

								// The line segment spans two boundaries, but is outside both of them.
								// (This can't happen when we're only clipping against just near/far but good
								//  to leave the check here for future usage if other clip planes are added.)
								return false;
						} else {

								// Update the s1 and s2 vertices to match the clipped line segment.
								s1.lerp(s2, alpha1);
								s2.lerp(s1, 1 - alpha2);

								return true;
						}
				}
		}
};
//# sourceMappingURL=data:application/json;base64,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TUFBTSxFQUFFLE9BQU8sSUFBSyxPQUFPLEdBQUcsT0FBTyxDQUFBLEFBQUUsQ0FBRSxDQUFDO09BRTdELE1BQU0sSUFBSyxPQUFPLEdBQUcsQ0FBQyxFQUFHOzs7QUFHekIsY0FBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsTUFBTSxFQUFFLE9BQU8sSUFBSyxPQUFPLEdBQUcsT0FBTyxDQUFBLEFBQUUsQ0FBRSxDQUFDO09BRTdEOztBQUVELFVBQUssTUFBTSxHQUFHLENBQUMsRUFBRzs7O0FBR2pCLGNBQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLE1BQU0sRUFBRSxNQUFNLElBQUssTUFBTSxHQUFHLE1BQU0sQ0FBQSxBQUFFLENBQUUsQ0FBQztPQUUxRCxNQUFNLElBQUssTUFBTSxHQUFHLENBQUMsRUFBRzs7O0FBR3hCLGNBQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFFLE1BQU0sRUFBRSxNQUFNLElBQUssTUFBTSxHQUFHLE1BQU0sQ0FBQSxBQUFFLENBQUUsQ0FBQztPQUUxRDs7QUFFRCxVQUFLLE1BQU0sR0FBRyxNQUFNLEVBQUc7Ozs7O0FBS3RCLGVBQU8sS0FBSyxDQUFDO09BRWIsTUFBTTs7O0FBR04sVUFBRSxDQUFDLElBQUksQ0FBRSxFQUFFLEVBQUUsTUFBTSxDQUFFLENBQUM7QUFDdEIsVUFBRSxDQUFDLElBQUksQ0FBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBRSxDQUFDOztBQUUxQixlQUFPLElBQUksQ0FBQztPQUVaO0tBRUQ7R0FFRDtDQUVELENBQUMiLCJmaWxlIjoiUHJvamVjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXHJcbiAqIEBhdXRob3IganVsaWFud2EgLyBodHRwczovL2dpdGh1Yi5jb20vanVsaWFud2FcclxuICovXHJcblxyXG5USFJFRS5SZW5kZXJhYmxlT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLmlkID0gMDtcclxuXHJcblx0dGhpcy5vYmplY3QgPSBudWxsO1xyXG5cdHRoaXMueiA9IDA7XHJcblx0dGhpcy5yZW5kZXJPcmRlciA9IDA7XHJcblxyXG59O1xyXG5cclxuLy9cclxuXHJcblRIUkVFLlJlbmRlcmFibGVGYWNlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLmlkID0gMDtcclxuXHJcblx0dGhpcy52MSA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlVmVydGV4KCk7XHJcblx0dGhpcy52MiA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlVmVydGV4KCk7XHJcblx0dGhpcy52MyA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlVmVydGV4KCk7XHJcblxyXG5cdHRoaXMubm9ybWFsTW9kZWwgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cclxuXHR0aGlzLnZlcnRleE5vcm1hbHNNb2RlbCA9IFsgbmV3IFRIUkVFLlZlY3RvcjMoKSwgbmV3IFRIUkVFLlZlY3RvcjMoKSwgbmV3IFRIUkVFLlZlY3RvcjMoKSBdO1xyXG5cdHRoaXMudmVydGV4Tm9ybWFsc0xlbmd0aCA9IDA7XHJcblxyXG5cdHRoaXMuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKTtcclxuXHR0aGlzLm1hdGVyaWFsID0gbnVsbDtcclxuXHR0aGlzLnV2cyA9IFsgbmV3IFRIUkVFLlZlY3RvcjIoKSwgbmV3IFRIUkVFLlZlY3RvcjIoKSwgbmV3IFRIUkVFLlZlY3RvcjIoKSBdO1xyXG5cclxuXHR0aGlzLnogPSAwO1xyXG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xyXG5cclxufTtcclxuXHJcbi8vXHJcblxyXG5USFJFRS5SZW5kZXJhYmxlVmVydGV4ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLnBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHR0aGlzLnBvc2l0aW9uV29ybGQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cdHRoaXMucG9zaXRpb25TY3JlZW4gPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xyXG5cclxuXHR0aGlzLnZpc2libGUgPSB0cnVlO1xyXG5cclxufTtcclxuXHJcblRIUkVFLlJlbmRlcmFibGVWZXJ0ZXgucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHZlcnRleCApIHtcclxuXHJcblx0dGhpcy5wb3NpdGlvbldvcmxkLmNvcHkoIHZlcnRleC5wb3NpdGlvbldvcmxkICk7XHJcblx0dGhpcy5wb3NpdGlvblNjcmVlbi5jb3B5KCB2ZXJ0ZXgucG9zaXRpb25TY3JlZW4gKTtcclxuXHJcbn07XHJcblxyXG4vL1xyXG5cclxuVEhSRUUuUmVuZGVyYWJsZUxpbmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMuaWQgPSAwO1xyXG5cclxuXHR0aGlzLnYxID0gbmV3IFRIUkVFLlJlbmRlcmFibGVWZXJ0ZXgoKTtcclxuXHR0aGlzLnYyID0gbmV3IFRIUkVFLlJlbmRlcmFibGVWZXJ0ZXgoKTtcclxuXHJcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBbIG5ldyBUSFJFRS5Db2xvcigpLCBuZXcgVEhSRUUuQ29sb3IoKSBdO1xyXG5cdHRoaXMubWF0ZXJpYWwgPSBudWxsO1xyXG5cclxuXHR0aGlzLnogPSAwO1xyXG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xyXG5cclxufTtcclxuXHJcbi8vXHJcblxyXG5USFJFRS5SZW5kZXJhYmxlU3ByaXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLmlkID0gMDtcclxuXHJcblx0dGhpcy5vYmplY3QgPSBudWxsO1xyXG5cclxuXHR0aGlzLnggPSAwO1xyXG5cdHRoaXMueSA9IDA7XHJcblx0dGhpcy56ID0gMDtcclxuXHJcblx0dGhpcy5yb3RhdGlvbiA9IDA7XHJcblx0dGhpcy5zY2FsZSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XHJcblxyXG5cdHRoaXMubWF0ZXJpYWwgPSBudWxsO1xyXG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xyXG5cclxufTtcclxuXHJcbi8vXHJcblxyXG5USFJFRS5Qcm9qZWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHZhciBfb2JqZWN0LCBfb2JqZWN0Q291bnQsIF9vYmplY3RQb29sID0gW10sIF9vYmplY3RQb29sTGVuZ3RoID0gMCxcclxuXHRfdmVydGV4LCBfdmVydGV4Q291bnQsIF92ZXJ0ZXhQb29sID0gW10sIF92ZXJ0ZXhQb29sTGVuZ3RoID0gMCxcclxuXHRfZmFjZSwgX2ZhY2VDb3VudCwgX2ZhY2VQb29sID0gW10sIF9mYWNlUG9vbExlbmd0aCA9IDAsXHJcblx0X2xpbmUsIF9saW5lQ291bnQsIF9saW5lUG9vbCA9IFtdLCBfbGluZVBvb2xMZW5ndGggPSAwLFxyXG5cdF9zcHJpdGUsIF9zcHJpdGVDb3VudCwgX3Nwcml0ZVBvb2wgPSBbXSwgX3Nwcml0ZVBvb2xMZW5ndGggPSAwLFxyXG5cclxuXHRfcmVuZGVyRGF0YSA9IHsgb2JqZWN0czogW10sIGxpZ2h0czogW10sIGVsZW1lbnRzOiBbXSB9LFxyXG5cclxuXHRfdmVjdG9yMyA9IG5ldyBUSFJFRS5WZWN0b3IzKCksXHJcblx0X3ZlY3RvcjQgPSBuZXcgVEhSRUUuVmVjdG9yNCgpLFxyXG5cclxuXHRfY2xpcEJveCA9IG5ldyBUSFJFRS5Cb3gzKCBuZXcgVEhSRUUuVmVjdG9yMyggLSAxLCAtIDEsIC0gMSApLCBuZXcgVEhSRUUuVmVjdG9yMyggMSwgMSwgMSApICksXHJcblx0X2JvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoKSxcclxuXHRfcG9pbnRzMyA9IG5ldyBBcnJheSggMyApLFxyXG5cdF9wb2ludHM0ID0gbmV3IEFycmF5KCA0ICksXHJcblxyXG5cdF92aWV3TWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKSxcclxuXHRfdmlld1Byb2plY3Rpb25NYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpLFxyXG5cclxuXHRfbW9kZWxNYXRyaXgsXHJcblx0X21vZGVsVmlld1Byb2plY3Rpb25NYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpLFxyXG5cclxuXHRfbm9ybWFsTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDMoKSxcclxuXHJcblx0X2ZydXN0dW0gPSBuZXcgVEhSRUUuRnJ1c3R1bSgpLFxyXG5cclxuXHRfY2xpcHBlZFZlcnRleDFQb3NpdGlvblNjcmVlbiA9IG5ldyBUSFJFRS5WZWN0b3I0KCksXHJcblx0X2NsaXBwZWRWZXJ0ZXgyUG9zaXRpb25TY3JlZW4gPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xyXG5cclxuXHQvL1xyXG5cclxuXHR0aGlzLnByb2plY3RWZWN0b3IgPSBmdW5jdGlvbiAoIHZlY3RvciwgY2FtZXJhICkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlByb2plY3RvcjogLnByb2plY3RWZWN0b3IoKSBpcyBub3cgdmVjdG9yLnByb2plY3QoKS4nICk7XHJcblx0XHR2ZWN0b3IucHJvamVjdCggY2FtZXJhICk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMudW5wcm9qZWN0VmVjdG9yID0gZnVuY3Rpb24gKCB2ZWN0b3IsIGNhbWVyYSApIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Qcm9qZWN0b3I6IC51bnByb2plY3RWZWN0b3IoKSBpcyBub3cgdmVjdG9yLnVucHJvamVjdCgpLicgKTtcclxuXHRcdHZlY3Rvci51bnByb2plY3QoIGNhbWVyYSApO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnBpY2tpbmdSYXkgPSBmdW5jdGlvbiAoIHZlY3RvciwgY2FtZXJhICkge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9qZWN0b3I6IC5waWNraW5nUmF5KCkgaXMgbm93IHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKCkuJyApO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvL1xyXG5cclxuXHR2YXIgUmVuZGVyTGlzdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdFx0dmFyIHV2cyA9IFtdO1xyXG5cclxuXHRcdHZhciBvYmplY3QgPSBudWxsO1xyXG5cdFx0dmFyIG1hdGVyaWFsID0gbnVsbDtcclxuXHJcblx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDMoKTtcclxuXHJcblx0XHR2YXIgc2V0T2JqZWN0ID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcclxuXHJcblx0XHRcdG9iamVjdCA9IHZhbHVlO1xyXG5cdFx0XHRtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcclxuXHJcblx0XHRcdG5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xyXG5cclxuXHRcdFx0bm9ybWFscy5sZW5ndGggPSAwO1xyXG5cdFx0XHR1dnMubGVuZ3RoID0gMDtcclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdHZhciBwcm9qZWN0VmVydGV4ID0gZnVuY3Rpb24gKCB2ZXJ0ZXggKSB7XHJcblxyXG5cdFx0XHR2YXIgcG9zaXRpb24gPSB2ZXJ0ZXgucG9zaXRpb247XHJcblx0XHRcdHZhciBwb3NpdGlvbldvcmxkID0gdmVydGV4LnBvc2l0aW9uV29ybGQ7XHJcblx0XHRcdHZhciBwb3NpdGlvblNjcmVlbiA9IHZlcnRleC5wb3NpdGlvblNjcmVlbjtcclxuXHJcblx0XHRcdHBvc2l0aW9uV29ybGQuY29weSggcG9zaXRpb24gKS5hcHBseU1hdHJpeDQoIF9tb2RlbE1hdHJpeCApO1xyXG5cdFx0XHRwb3NpdGlvblNjcmVlbi5jb3B5KCBwb3NpdGlvbldvcmxkICkuYXBwbHlNYXRyaXg0KCBfdmlld1Byb2plY3Rpb25NYXRyaXggKTtcclxuXHJcblx0XHRcdHZhciBpbnZXID0gMSAvIHBvc2l0aW9uU2NyZWVuLnc7XHJcblxyXG5cdFx0XHRwb3NpdGlvblNjcmVlbi54ICo9IGludlc7XHJcblx0XHRcdHBvc2l0aW9uU2NyZWVuLnkgKj0gaW52VztcclxuXHRcdFx0cG9zaXRpb25TY3JlZW4ueiAqPSBpbnZXO1xyXG5cclxuXHRcdFx0dmVydGV4LnZpc2libGUgPSBwb3NpdGlvblNjcmVlbi54ID49IC0gMSAmJiBwb3NpdGlvblNjcmVlbi54IDw9IDEgJiZcclxuXHRcdFx0XHRcdCBwb3NpdGlvblNjcmVlbi55ID49IC0gMSAmJiBwb3NpdGlvblNjcmVlbi55IDw9IDEgJiZcclxuXHRcdFx0XHRcdCBwb3NpdGlvblNjcmVlbi56ID49IC0gMSAmJiBwb3NpdGlvblNjcmVlbi56IDw9IDE7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcHVzaFZlcnRleCA9IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcclxuXHJcblx0XHRcdF92ZXJ0ZXggPSBnZXROZXh0VmVydGV4SW5Qb29sKCk7XHJcblx0XHRcdF92ZXJ0ZXgucG9zaXRpb24uc2V0KCB4LCB5LCB6ICk7XHJcblxyXG5cdFx0XHRwcm9qZWN0VmVydGV4KCBfdmVydGV4ICk7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcHVzaE5vcm1hbCA9IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcclxuXHJcblx0XHRcdG5vcm1hbHMucHVzaCggeCwgeSwgeiApO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIHB1c2hVdiA9IGZ1bmN0aW9uICggeCwgeSApIHtcclxuXHJcblx0XHRcdHV2cy5wdXNoKCB4LCB5ICk7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgY2hlY2tUcmlhbmdsZVZpc2liaWxpdHkgPSBmdW5jdGlvbiAoIHYxLCB2MiwgdjMgKSB7XHJcblxyXG5cdFx0XHRpZiAoIHYxLnZpc2libGUgPT09IHRydWUgfHwgdjIudmlzaWJsZSA9PT0gdHJ1ZSB8fCB2My52aXNpYmxlID09PSB0cnVlICkgcmV0dXJuIHRydWU7XHJcblxyXG5cdFx0XHRfcG9pbnRzM1sgMCBdID0gdjEucG9zaXRpb25TY3JlZW47XHJcblx0XHRcdF9wb2ludHMzWyAxIF0gPSB2Mi5wb3NpdGlvblNjcmVlbjtcclxuXHRcdFx0X3BvaW50czNbIDIgXSA9IHYzLnBvc2l0aW9uU2NyZWVuO1xyXG5cclxuXHRcdFx0cmV0dXJuIF9jbGlwQm94LmlzSW50ZXJzZWN0aW9uQm94KCBfYm91bmRpbmdCb3guc2V0RnJvbVBvaW50cyggX3BvaW50czMgKSApO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIGNoZWNrQmFja2ZhY2VDdWxsaW5nID0gZnVuY3Rpb24gKCB2MSwgdjIsIHYzICkge1xyXG5cclxuXHRcdFx0cmV0dXJuICggKCB2My5wb3NpdGlvblNjcmVlbi54IC0gdjEucG9zaXRpb25TY3JlZW4ueCApICpcclxuXHRcdFx0XHQgICAgKCB2Mi5wb3NpdGlvblNjcmVlbi55IC0gdjEucG9zaXRpb25TY3JlZW4ueSApIC1cclxuXHRcdFx0XHQgICAgKCB2My5wb3NpdGlvblNjcmVlbi55IC0gdjEucG9zaXRpb25TY3JlZW4ueSApICpcclxuXHRcdFx0XHQgICAgKCB2Mi5wb3NpdGlvblNjcmVlbi54IC0gdjEucG9zaXRpb25TY3JlZW4ueCApICkgPCAwO1xyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIHB1c2hMaW5lID0gZnVuY3Rpb24gKCBhLCBiICkge1xyXG5cclxuXHRcdFx0dmFyIHYxID0gX3ZlcnRleFBvb2xbIGEgXTtcclxuXHRcdFx0dmFyIHYyID0gX3ZlcnRleFBvb2xbIGIgXTtcclxuXHJcblx0XHRcdF9saW5lID0gZ2V0TmV4dExpbmVJblBvb2woKTtcclxuXHJcblx0XHRcdF9saW5lLmlkID0gb2JqZWN0LmlkO1xyXG5cdFx0XHRfbGluZS52MS5jb3B5KCB2MSApO1xyXG5cdFx0XHRfbGluZS52Mi5jb3B5KCB2MiApO1xyXG5cdFx0XHRfbGluZS56ID0gKCB2MS5wb3NpdGlvblNjcmVlbi56ICsgdjIucG9zaXRpb25TY3JlZW4ueiApIC8gMjtcclxuXHRcdFx0X2xpbmUucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XHJcblxyXG5cdFx0XHRfbGluZS5tYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcclxuXHJcblx0XHRcdF9yZW5kZXJEYXRhLmVsZW1lbnRzLnB1c2goIF9saW5lICk7XHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcHVzaFRyaWFuZ2xlID0gZnVuY3Rpb24gKCBhLCBiLCBjICkge1xyXG5cclxuXHRcdFx0dmFyIHYxID0gX3ZlcnRleFBvb2xbIGEgXTtcclxuXHRcdFx0dmFyIHYyID0gX3ZlcnRleFBvb2xbIGIgXTtcclxuXHRcdFx0dmFyIHYzID0gX3ZlcnRleFBvb2xbIGMgXTtcclxuXHJcblx0XHRcdGlmICggY2hlY2tUcmlhbmdsZVZpc2liaWxpdHkoIHYxLCB2MiwgdjMgKSA9PT0gZmFsc2UgKSByZXR1cm47XHJcblxyXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IFRIUkVFLkRvdWJsZVNpZGUgfHwgY2hlY2tCYWNrZmFjZUN1bGxpbmcoIHYxLCB2MiwgdjMgKSA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0X2ZhY2UgPSBnZXROZXh0RmFjZUluUG9vbCgpO1xyXG5cclxuXHRcdFx0XHRfZmFjZS5pZCA9IG9iamVjdC5pZDtcclxuXHRcdFx0XHRfZmFjZS52MS5jb3B5KCB2MSApO1xyXG5cdFx0XHRcdF9mYWNlLnYyLmNvcHkoIHYyICk7XHJcblx0XHRcdFx0X2ZhY2UudjMuY29weSggdjMgKTtcclxuXHRcdFx0XHRfZmFjZS56ID0gKCB2MS5wb3NpdGlvblNjcmVlbi56ICsgdjIucG9zaXRpb25TY3JlZW4ueiArIHYzLnBvc2l0aW9uU2NyZWVuLnogKSAvIDM7XHJcblx0XHRcdFx0X2ZhY2UucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XHJcblxyXG5cdFx0XHRcdC8vIHVzZSBmaXJzdCB2ZXJ0ZXggbm9ybWFsIGFzIGZhY2Ugbm9ybWFsXHJcblxyXG5cdFx0XHRcdF9mYWNlLm5vcm1hbE1vZGVsLmZyb21BcnJheSggbm9ybWFscywgYSAqIDMgKTtcclxuXHRcdFx0XHRfZmFjZS5ub3JtYWxNb2RlbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAzOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdHZhciBub3JtYWwgPSBfZmFjZS52ZXJ0ZXhOb3JtYWxzTW9kZWxbIGkgXTtcclxuXHRcdFx0XHRcdG5vcm1hbC5mcm9tQXJyYXkoIG5vcm1hbHMsIGFyZ3VtZW50c1sgaSBdICogMyApO1xyXG5cdFx0XHRcdFx0bm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHV2ID0gX2ZhY2UudXZzWyBpIF07XHJcblx0XHRcdFx0XHR1di5mcm9tQXJyYXkoIHV2cywgYXJndW1lbnRzWyBpIF0gKiAyICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0X2ZhY2UudmVydGV4Tm9ybWFsc0xlbmd0aCA9IDM7XHJcblxyXG5cdFx0XHRcdF9mYWNlLm1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xyXG5cclxuXHRcdFx0XHRfcmVuZGVyRGF0YS5lbGVtZW50cy5wdXNoKCBfZmFjZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2V0T2JqZWN0OiBzZXRPYmplY3QsXHJcblx0XHRcdHByb2plY3RWZXJ0ZXg6IHByb2plY3RWZXJ0ZXgsXHJcblx0XHRcdGNoZWNrVHJpYW5nbGVWaXNpYmlsaXR5OiBjaGVja1RyaWFuZ2xlVmlzaWJpbGl0eSxcclxuXHRcdFx0Y2hlY2tCYWNrZmFjZUN1bGxpbmc6IGNoZWNrQmFja2ZhY2VDdWxsaW5nLFxyXG5cdFx0XHRwdXNoVmVydGV4OiBwdXNoVmVydGV4LFxyXG5cdFx0XHRwdXNoTm9ybWFsOiBwdXNoTm9ybWFsLFxyXG5cdFx0XHRwdXNoVXY6IHB1c2hVdixcclxuXHRcdFx0cHVzaExpbmU6IHB1c2hMaW5lLFxyXG5cdFx0XHRwdXNoVHJpYW5nbGU6IHB1c2hUcmlhbmdsZVxyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHR2YXIgcmVuZGVyTGlzdCA9IG5ldyBSZW5kZXJMaXN0KCk7XHJcblxyXG5cdHRoaXMucHJvamVjdFNjZW5lID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhLCBzb3J0T2JqZWN0cywgc29ydEVsZW1lbnRzICkge1xyXG5cclxuXHRcdF9mYWNlQ291bnQgPSAwO1xyXG5cdFx0X2xpbmVDb3VudCA9IDA7XHJcblx0XHRfc3ByaXRlQ291bnQgPSAwO1xyXG5cclxuXHRcdF9yZW5kZXJEYXRhLmVsZW1lbnRzLmxlbmd0aCA9IDA7XHJcblxyXG5cdFx0aWYgKCBzY2VuZS5hdXRvVXBkYXRlID09PSB0cnVlICkgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHRcdGlmICggY2FtZXJhLnBhcmVudCA9PT0gbnVsbCApIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuXHRcdF92aWV3TWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZSggY2FtZXJhLm1hdHJpeFdvcmxkICkgKTtcclxuXHRcdF92aWV3UHJvamVjdGlvbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgX3ZpZXdNYXRyaXggKTtcclxuXHJcblx0XHRfZnJ1c3R1bS5zZXRGcm9tTWF0cml4KCBfdmlld1Byb2plY3Rpb25NYXRyaXggKTtcclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdF9vYmplY3RDb3VudCA9IDA7XHJcblxyXG5cdFx0X3JlbmRlckRhdGEub2JqZWN0cy5sZW5ndGggPSAwO1xyXG5cdFx0X3JlbmRlckRhdGEubGlnaHRzLmxlbmd0aCA9IDA7XHJcblxyXG5cdFx0c2NlbmUudHJhdmVyc2VWaXNpYmxlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcclxuXHJcblx0XHRcdGlmICggb2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuTGlnaHQgKSB7XHJcblxyXG5cdFx0XHRcdF9yZW5kZXJEYXRhLmxpZ2h0cy5wdXNoKCBvYmplY3QgKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLk1lc2ggfHwgb2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuTGluZSB8fCBvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5TcHJpdGUgKSB7XHJcblxyXG5cdFx0XHRcdHZhciBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcclxuXHJcblx0XHRcdFx0aWYgKCBtYXRlcmlhbC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcclxuXHJcblx0XHRcdFx0aWYgKCBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9PT0gZmFsc2UgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0X29iamVjdCA9IGdldE5leHRPYmplY3RJblBvb2woKTtcclxuXHRcdFx0XHRcdF9vYmplY3QuaWQgPSBvYmplY3QuaWQ7XHJcblx0XHRcdFx0XHRfb2JqZWN0Lm9iamVjdCA9IG9iamVjdDtcclxuXHJcblx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApO1xyXG5cdFx0XHRcdFx0X3ZlY3RvcjMuYXBwbHlQcm9qZWN0aW9uKCBfdmlld1Byb2plY3Rpb25NYXRyaXggKTtcclxuXHRcdFx0XHRcdF9vYmplY3QueiA9IF92ZWN0b3IzLno7XHJcblx0XHRcdFx0XHRfb2JqZWN0LnJlbmRlck9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xyXG5cclxuXHRcdFx0XHRcdF9yZW5kZXJEYXRhLm9iamVjdHMucHVzaCggX29iamVjdCApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSApO1xyXG5cclxuXHRcdGlmICggc29ydE9iamVjdHMgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRfcmVuZGVyRGF0YS5vYmplY3RzLnNvcnQoIHBhaW50ZXJTb3J0ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0Zm9yICggdmFyIG8gPSAwLCBvbCA9IF9yZW5kZXJEYXRhLm9iamVjdHMubGVuZ3RoOyBvIDwgb2w7IG8gKysgKSB7XHJcblxyXG5cdFx0XHR2YXIgb2JqZWN0ID0gX3JlbmRlckRhdGEub2JqZWN0c1sgbyBdLm9iamVjdDtcclxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xyXG5cclxuXHRcdFx0cmVuZGVyTGlzdC5zZXRPYmplY3QoIG9iamVjdCApO1xyXG5cclxuXHRcdFx0X21vZGVsTWF0cml4ID0gb2JqZWN0Lm1hdHJpeFdvcmxkO1xyXG5cclxuXHRcdFx0X3ZlcnRleENvdW50ID0gMDtcclxuXHJcblx0XHRcdGlmICggb2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuTWVzaCApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBnZW9tZXRyeSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5ICkge1xyXG5cclxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcclxuXHRcdFx0XHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGVzLnBvc2l0aW9uID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcclxuXHJcblx0XHRcdFx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoVmVydGV4KCBwb3NpdGlvbnNbIGkgXSwgcG9zaXRpb25zWyBpICsgMSBdLCBwb3NpdGlvbnNbIGkgKyAyIF0gKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIG5vcm1hbHMgPSBhdHRyaWJ1dGVzLm5vcm1hbC5hcnJheTtcclxuXHJcblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG5vcm1hbHMubGVuZ3RoOyBpIDwgbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRyZW5kZXJMaXN0LnB1c2hOb3JtYWwoIG5vcm1hbHNbIGkgXSwgbm9ybWFsc1sgaSArIDEgXSwgbm9ybWFsc1sgaSArIDIgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZXMudXYgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciB1dnMgPSBhdHRyaWJ1dGVzLnV2LmFycmF5O1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdXZzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMiApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoVXYoIHV2c1sgaSBdLCB1dnNbIGkgKyAxIF0gKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kZXguYXJyYXk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPiAwICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgbyA9IDA7IG8gPCBncm91cHMubGVuZ3RoOyBvICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgbyBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gZ3JvdXAuc3RhcnQsIGwgPSBncm91cC5zdGFydCArIGdyb3VwLmNvdW50OyBpIDwgbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoVHJpYW5nbGUoIGluZGljZXNbIGkgXSwgaW5kaWNlc1sgaSArIDEgXSwgaW5kaWNlc1sgaSArIDIgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoVHJpYW5nbGUoIGluZGljZXNbIGkgXSwgaW5kaWNlc1sgaSArIDEgXSwgaW5kaWNlc1sgaSArIDIgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOyBpIDwgbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRyZW5kZXJMaXN0LnB1c2hUcmlhbmdsZSggaSwgaSArIDEsIGkgKyAyICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeSBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5ICkge1xyXG5cclxuXHRcdFx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xyXG5cdFx0XHRcdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XHJcblx0XHRcdFx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIDAgXTtcclxuXHJcblx0XHRcdFx0XHRfbm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggX21vZGVsTWF0cml4ICk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xyXG5cclxuXHRcdFx0XHRcdHZhciBpc0ZhY2VNYXRlcmlhbCA9IG1hdGVyaWFsIGluc3RhbmNlb2YgVEhSRUUuTWVzaEZhY2VNYXRlcmlhbDtcclxuXHRcdFx0XHRcdHZhciBvYmplY3RNYXRlcmlhbHMgPSBpc0ZhY2VNYXRlcmlhbCA9PT0gdHJ1ZSA/IG9iamVjdC5tYXRlcmlhbCA6IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0Zm9yICggdmFyIHYgPSAwLCB2bCA9IHZlcnRpY2VzLmxlbmd0aDsgdiA8IHZsOyB2ICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHZlcnRleCA9IHZlcnRpY2VzWyB2IF07XHJcblxyXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5jb3B5KCB2ZXJ0ZXggKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbWF0ZXJpYWwubW9ycGhUYXJnZXRzID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBtb3JwaEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgdCA9IDAsIHRsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgdCA8IHRsOyB0ICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHZhciBpbmZsdWVuY2UgPSBtb3JwaEluZmx1ZW5jZXNbIHQgXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZmx1ZW5jZSA9PT0gMCApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHZhciB0YXJnZXQgPSBtb3JwaFRhcmdldHNbIHQgXTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciB0YXJnZXRWZXJ0ZXggPSB0YXJnZXQudmVydGljZXNbIHYgXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRfdmVjdG9yMy54ICs9ICggdGFyZ2V0VmVydGV4LnggLSB2ZXJ0ZXgueCApICogaW5mbHVlbmNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0X3ZlY3RvcjMueSArPSAoIHRhcmdldFZlcnRleC55IC0gdmVydGV4LnkgKSAqIGluZmx1ZW5jZTtcclxuXHRcdFx0XHRcdFx0XHRcdF92ZWN0b3IzLnogKz0gKCB0YXJnZXRWZXJ0ZXgueiAtIHZlcnRleC56ICkgKiBpbmZsdWVuY2U7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHJlbmRlckxpc3QucHVzaFZlcnRleCggX3ZlY3RvcjMueCwgX3ZlY3RvcjMueSwgX3ZlY3RvcjMueiApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRmb3IgKCB2YXIgZiA9IDAsIGZsID0gZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBmIF07XHJcblxyXG5cdFx0XHRcdFx0XHRtYXRlcmlhbCA9IGlzRmFjZU1hdGVyaWFsID09PSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0ID8gb2JqZWN0TWF0ZXJpYWxzLm1hdGVyaWFsc1sgZmFjZS5tYXRlcmlhbEluZGV4IF1cclxuXHRcdFx0XHRcdFx0XHQgOiBvYmplY3QubWF0ZXJpYWw7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBzaWRlID0gbWF0ZXJpYWwuc2lkZTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciB2MSA9IF92ZXJ0ZXhQb29sWyBmYWNlLmEgXTtcclxuXHRcdFx0XHRcdFx0dmFyIHYyID0gX3ZlcnRleFBvb2xbIGZhY2UuYiBdO1xyXG5cdFx0XHRcdFx0XHR2YXIgdjMgPSBfdmVydGV4UG9vbFsgZmFjZS5jIF07XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIHJlbmRlckxpc3QuY2hlY2tUcmlhbmdsZVZpc2liaWxpdHkoIHYxLCB2MiwgdjMgKSA9PT0gZmFsc2UgKSBjb250aW51ZTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciB2aXNpYmxlID0gcmVuZGVyTGlzdC5jaGVja0JhY2tmYWNlQ3VsbGluZyggdjEsIHYyLCB2MyApO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBzaWRlICE9PSBUSFJFRS5Eb3VibGVTaWRlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIHNpZGUgPT09IFRIUkVFLkZyb250U2lkZSAmJiB2aXNpYmxlID09PSBmYWxzZSApIGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggc2lkZSA9PT0gVEhSRUUuQmFja1NpZGUgJiYgdmlzaWJsZSA9PT0gdHJ1ZSApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0X2ZhY2UgPSBnZXROZXh0RmFjZUluUG9vbCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0X2ZhY2UuaWQgPSBvYmplY3QuaWQ7XHJcblx0XHRcdFx0XHRcdF9mYWNlLnYxLmNvcHkoIHYxICk7XHJcblx0XHRcdFx0XHRcdF9mYWNlLnYyLmNvcHkoIHYyICk7XHJcblx0XHRcdFx0XHRcdF9mYWNlLnYzLmNvcHkoIHYzICk7XHJcblxyXG5cdFx0XHRcdFx0XHRfZmFjZS5ub3JtYWxNb2RlbC5jb3B5KCBmYWNlLm5vcm1hbCApO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCB2aXNpYmxlID09PSBmYWxzZSAmJiAoIHNpZGUgPT09IFRIUkVFLkJhY2tTaWRlIHx8IHNpZGUgPT09IFRIUkVFLkRvdWJsZVNpZGUgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0X2ZhY2Uubm9ybWFsTW9kZWwubmVnYXRlKCk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRfZmFjZS5ub3JtYWxNb2RlbC5hcHBseU1hdHJpeDMoIF9ub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBmYWNlVmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscztcclxuXHJcblx0XHRcdFx0XHRcdGZvciAoIHZhciBuID0gMCwgbmwgPSBNYXRoLm1pbiggZmFjZVZlcnRleE5vcm1hbHMubGVuZ3RoLCAzICk7IG4gPCBubDsgbiArKyApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIG5vcm1hbE1vZGVsID0gX2ZhY2UudmVydGV4Tm9ybWFsc01vZGVsWyBuIF07XHJcblx0XHRcdFx0XHRcdFx0bm9ybWFsTW9kZWwuY29weSggZmFjZVZlcnRleE5vcm1hbHNbIG4gXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoIHZpc2libGUgPT09IGZhbHNlICYmICggc2lkZSA9PT0gVEhSRUUuQmFja1NpZGUgfHwgc2lkZSA9PT0gVEhSRUUuRG91YmxlU2lkZSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdG5vcm1hbE1vZGVsLm5lZ2F0ZSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdG5vcm1hbE1vZGVsLmFwcGx5TWF0cml4MyggX25vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0X2ZhY2UudmVydGV4Tm9ybWFsc0xlbmd0aCA9IGZhY2VWZXJ0ZXhOb3JtYWxzLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHRcdHZhciB2ZXJ0ZXhVdnMgPSBmYWNlVmVydGV4VXZzWyBmIF07XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIHZlcnRleFV2cyAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgdSA9IDA7IHUgPCAzOyB1ICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdF9mYWNlLnV2c1sgdSBdLmNvcHkoIHZlcnRleFV2c1sgdSBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdF9mYWNlLmNvbG9yID0gZmFjZS5jb2xvcjtcclxuXHRcdFx0XHRcdFx0X2ZhY2UubWF0ZXJpYWwgPSBtYXRlcmlhbDtcclxuXHJcblx0XHRcdFx0XHRcdF9mYWNlLnogPSAoIHYxLnBvc2l0aW9uU2NyZWVuLnogKyB2Mi5wb3NpdGlvblNjcmVlbi56ICsgdjMucG9zaXRpb25TY3JlZW4ueiApIC8gMztcclxuXHRcdFx0XHRcdFx0X2ZhY2UucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XHJcblxyXG5cdFx0XHRcdFx0XHRfcmVuZGVyRGF0YS5lbGVtZW50cy5wdXNoKCBfZmFjZSApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuTGluZSApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBnZW9tZXRyeSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5ICkge1xyXG5cclxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcclxuXHJcblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGw7IGkgKz0gMyApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoVmVydGV4KCBwb3NpdGlvbnNbIGkgXSwgcG9zaXRpb25zWyBpICsgMSBdLCBwb3NpdGlvbnNbIGkgKyAyIF0gKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdGlmICggZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kZXguYXJyYXk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgbDsgaSArPSAyICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHJlbmRlckxpc3QucHVzaExpbmUoIGluZGljZXNbIGkgXSwgaW5kaWNlc1sgaSArIDEgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgc3RlcCA9IG9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLkxpbmVTZWdtZW50cyA/IDIgOiAxO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSAoIHBvc2l0aW9ucy5sZW5ndGggLyAzICkgLSAxOyBpIDwgbDsgaSArPSBzdGVwICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHJlbmRlckxpc3QucHVzaExpbmUoIGksIGkgKyAxICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkgKSB7XHJcblxyXG5cdFx0XHRcdFx0X21vZGVsVmlld1Byb2plY3Rpb25NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggX3ZpZXdQcm9qZWN0aW9uTWF0cml4LCBfbW9kZWxNYXRyaXggKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgdmVydGljZXMgPSBvYmplY3QuZ2VvbWV0cnkudmVydGljZXM7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB2ZXJ0aWNlcy5sZW5ndGggPT09IDAgKSBjb250aW51ZTtcclxuXHJcblx0XHRcdFx0XHR2MSA9IGdldE5leHRWZXJ0ZXhJblBvb2woKTtcclxuXHRcdFx0XHRcdHYxLnBvc2l0aW9uU2NyZWVuLmNvcHkoIHZlcnRpY2VzWyAwIF0gKS5hcHBseU1hdHJpeDQoIF9tb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4ICk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHN0ZXAgPSBvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5MaW5lU2VnbWVudHMgPyAyIDogMTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCB2YXIgdiA9IDEsIHZsID0gdmVydGljZXMubGVuZ3RoOyB2IDwgdmw7IHYgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2MSA9IGdldE5leHRWZXJ0ZXhJblBvb2woKTtcclxuXHRcdFx0XHRcdFx0djEucG9zaXRpb25TY3JlZW4uY29weSggdmVydGljZXNbIHYgXSApLmFwcGx5TWF0cml4NCggX21vZGVsVmlld1Byb2plY3Rpb25NYXRyaXggKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggKCB2ICsgMSApICUgc3RlcCA+IDAgKSBjb250aW51ZTtcclxuXHJcblx0XHRcdFx0XHRcdHYyID0gX3ZlcnRleFBvb2xbIF92ZXJ0ZXhDb3VudCAtIDIgXTtcclxuXHJcblx0XHRcdFx0XHRcdF9jbGlwcGVkVmVydGV4MVBvc2l0aW9uU2NyZWVuLmNvcHkoIHYxLnBvc2l0aW9uU2NyZWVuICk7XHJcblx0XHRcdFx0XHRcdF9jbGlwcGVkVmVydGV4MlBvc2l0aW9uU2NyZWVuLmNvcHkoIHYyLnBvc2l0aW9uU2NyZWVuICk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIGNsaXBMaW5lKCBfY2xpcHBlZFZlcnRleDFQb3NpdGlvblNjcmVlbiwgX2NsaXBwZWRWZXJ0ZXgyUG9zaXRpb25TY3JlZW4gKSA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gUGVyZm9ybSB0aGUgcGVyc3BlY3RpdmUgZGl2aWRlXHJcblx0XHRcdFx0XHRcdFx0X2NsaXBwZWRWZXJ0ZXgxUG9zaXRpb25TY3JlZW4ubXVsdGlwbHlTY2FsYXIoIDEgLyBfY2xpcHBlZFZlcnRleDFQb3NpdGlvblNjcmVlbi53ICk7XHJcblx0XHRcdFx0XHRcdFx0X2NsaXBwZWRWZXJ0ZXgyUG9zaXRpb25TY3JlZW4ubXVsdGlwbHlTY2FsYXIoIDEgLyBfY2xpcHBlZFZlcnRleDJQb3NpdGlvblNjcmVlbi53ICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdF9saW5lID0gZ2V0TmV4dExpbmVJblBvb2woKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0X2xpbmUuaWQgPSBvYmplY3QuaWQ7XHJcblx0XHRcdFx0XHRcdFx0X2xpbmUudjEucG9zaXRpb25TY3JlZW4uY29weSggX2NsaXBwZWRWZXJ0ZXgxUG9zaXRpb25TY3JlZW4gKTtcclxuXHRcdFx0XHRcdFx0XHRfbGluZS52Mi5wb3NpdGlvblNjcmVlbi5jb3B5KCBfY2xpcHBlZFZlcnRleDJQb3NpdGlvblNjcmVlbiApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRfbGluZS56ID0gTWF0aC5tYXgoIF9jbGlwcGVkVmVydGV4MVBvc2l0aW9uU2NyZWVuLnosIF9jbGlwcGVkVmVydGV4MlBvc2l0aW9uU2NyZWVuLnogKTtcclxuXHRcdFx0XHRcdFx0XHRfbGluZS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcclxuXHJcblx0XHRcdFx0XHRcdFx0X2xpbmUubWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0Lm1hdGVyaWFsLnZlcnRleENvbG9ycyA9PT0gVEhSRUUuVmVydGV4Q29sb3JzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdF9saW5lLnZlcnRleENvbG9yc1sgMCBdLmNvcHkoIG9iamVjdC5nZW9tZXRyeS5jb2xvcnNbIHYgXSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0X2xpbmUudmVydGV4Q29sb3JzWyAxIF0uY29weSggb2JqZWN0Lmdlb21ldHJ5LmNvbG9yc1sgdiAtIDEgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdF9yZW5kZXJEYXRhLmVsZW1lbnRzLnB1c2goIF9saW5lICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5TcHJpdGUgKSB7XHJcblxyXG5cdFx0XHRcdF92ZWN0b3I0LnNldCggX21vZGVsTWF0cml4LmVsZW1lbnRzWyAxMiBdLCBfbW9kZWxNYXRyaXguZWxlbWVudHNbIDEzIF0sIF9tb2RlbE1hdHJpeC5lbGVtZW50c1sgMTQgXSwgMSApO1xyXG5cdFx0XHRcdF92ZWN0b3I0LmFwcGx5TWF0cml4NCggX3ZpZXdQcm9qZWN0aW9uTWF0cml4ICk7XHJcblxyXG5cdFx0XHRcdHZhciBpbnZXID0gMSAvIF92ZWN0b3I0Lnc7XHJcblxyXG5cdFx0XHRcdF92ZWN0b3I0LnogKj0gaW52VztcclxuXHJcblx0XHRcdFx0aWYgKCBfdmVjdG9yNC56ID49IC0gMSAmJiBfdmVjdG9yNC56IDw9IDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0X3Nwcml0ZSA9IGdldE5leHRTcHJpdGVJblBvb2woKTtcclxuXHRcdFx0XHRcdF9zcHJpdGUuaWQgPSBvYmplY3QuaWQ7XHJcblx0XHRcdFx0XHRfc3ByaXRlLnggPSBfdmVjdG9yNC54ICogaW52VztcclxuXHRcdFx0XHRcdF9zcHJpdGUueSA9IF92ZWN0b3I0LnkgKiBpbnZXO1xyXG5cdFx0XHRcdFx0X3Nwcml0ZS56ID0gX3ZlY3RvcjQuejtcclxuXHRcdFx0XHRcdF9zcHJpdGUucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XHJcblx0XHRcdFx0XHRfc3ByaXRlLm9iamVjdCA9IG9iamVjdDtcclxuXHJcblx0XHRcdFx0XHRfc3ByaXRlLnJvdGF0aW9uID0gb2JqZWN0LnJvdGF0aW9uO1xyXG5cclxuXHRcdFx0XHRcdF9zcHJpdGUuc2NhbGUueCA9IG9iamVjdC5zY2FsZS54ICogTWF0aC5hYnMoIF9zcHJpdGUueCAtICggX3ZlY3RvcjQueCArIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gKSAvICggX3ZlY3RvcjQudyArIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAxMiBdICkgKTtcclxuXHRcdFx0XHRcdF9zcHJpdGUuc2NhbGUueSA9IG9iamVjdC5zY2FsZS55ICogTWF0aC5hYnMoIF9zcHJpdGUueSAtICggX3ZlY3RvcjQueSArIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA1IF0gKSAvICggX3ZlY3RvcjQudyArIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAxMyBdICkgKTtcclxuXHJcblx0XHRcdFx0XHRfc3ByaXRlLm1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xyXG5cclxuXHRcdFx0XHRcdF9yZW5kZXJEYXRhLmVsZW1lbnRzLnB1c2goIF9zcHJpdGUgKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNvcnRFbGVtZW50cyA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdF9yZW5kZXJEYXRhLmVsZW1lbnRzLnNvcnQoIHBhaW50ZXJTb3J0ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBfcmVuZGVyRGF0YTtcclxuXHJcblx0fTtcclxuXHJcblx0Ly8gUG9vbHNcclxuXHJcblx0ZnVuY3Rpb24gZ2V0TmV4dE9iamVjdEluUG9vbCgpIHtcclxuXHJcblx0XHRpZiAoIF9vYmplY3RDb3VudCA9PT0gX29iamVjdFBvb2xMZW5ndGggKSB7XHJcblxyXG5cdFx0XHR2YXIgb2JqZWN0ID0gbmV3IFRIUkVFLlJlbmRlcmFibGVPYmplY3QoKTtcclxuXHRcdFx0X29iamVjdFBvb2wucHVzaCggb2JqZWN0ICk7XHJcblx0XHRcdF9vYmplY3RQb29sTGVuZ3RoICsrO1xyXG5cdFx0XHRfb2JqZWN0Q291bnQgKys7XHJcblx0XHRcdHJldHVybiBvYmplY3Q7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBfb2JqZWN0UG9vbFsgX29iamVjdENvdW50ICsrIF07XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0TmV4dFZlcnRleEluUG9vbCgpIHtcclxuXHJcblx0XHRpZiAoIF92ZXJ0ZXhDb3VudCA9PT0gX3ZlcnRleFBvb2xMZW5ndGggKSB7XHJcblxyXG5cdFx0XHR2YXIgdmVydGV4ID0gbmV3IFRIUkVFLlJlbmRlcmFibGVWZXJ0ZXgoKTtcclxuXHRcdFx0X3ZlcnRleFBvb2wucHVzaCggdmVydGV4ICk7XHJcblx0XHRcdF92ZXJ0ZXhQb29sTGVuZ3RoICsrO1xyXG5cdFx0XHRfdmVydGV4Q291bnQgKys7XHJcblx0XHRcdHJldHVybiB2ZXJ0ZXg7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBfdmVydGV4UG9vbFsgX3ZlcnRleENvdW50ICsrIF07XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0TmV4dEZhY2VJblBvb2woKSB7XHJcblxyXG5cdFx0aWYgKCBfZmFjZUNvdW50ID09PSBfZmFjZVBvb2xMZW5ndGggKSB7XHJcblxyXG5cdFx0XHR2YXIgZmFjZSA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlRmFjZSgpO1xyXG5cdFx0XHRfZmFjZVBvb2wucHVzaCggZmFjZSApO1xyXG5cdFx0XHRfZmFjZVBvb2xMZW5ndGggKys7XHJcblx0XHRcdF9mYWNlQ291bnQgKys7XHJcblx0XHRcdHJldHVybiBmYWNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gX2ZhY2VQb29sWyBfZmFjZUNvdW50ICsrIF07XHJcblxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldE5leHRMaW5lSW5Qb29sKCkge1xyXG5cclxuXHRcdGlmICggX2xpbmVDb3VudCA9PT0gX2xpbmVQb29sTGVuZ3RoICkge1xyXG5cclxuXHRcdFx0dmFyIGxpbmUgPSBuZXcgVEhSRUUuUmVuZGVyYWJsZUxpbmUoKTtcclxuXHRcdFx0X2xpbmVQb29sLnB1c2goIGxpbmUgKTtcclxuXHRcdFx0X2xpbmVQb29sTGVuZ3RoICsrO1xyXG5cdFx0XHRfbGluZUNvdW50ICsrO1xyXG5cdFx0XHRyZXR1cm4gbGluZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIF9saW5lUG9vbFsgX2xpbmVDb3VudCArKyBdO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldE5leHRTcHJpdGVJblBvb2woKSB7XHJcblxyXG5cdFx0aWYgKCBfc3ByaXRlQ291bnQgPT09IF9zcHJpdGVQb29sTGVuZ3RoICkge1xyXG5cclxuXHRcdFx0dmFyIHNwcml0ZSA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlU3ByaXRlKCk7XHJcblx0XHRcdF9zcHJpdGVQb29sLnB1c2goIHNwcml0ZSApO1xyXG5cdFx0XHRfc3ByaXRlUG9vbExlbmd0aCArKztcclxuXHRcdFx0X3Nwcml0ZUNvdW50ICsrO1xyXG5cdFx0XHRyZXR1cm4gc3ByaXRlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gX3Nwcml0ZVBvb2xbIF9zcHJpdGVDb3VudCArKyBdO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vXHJcblxyXG5cdGZ1bmN0aW9uIHBhaW50ZXJTb3J0KCBhLCBiICkge1xyXG5cclxuXHRcdGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHtcclxuXHJcblx0XHRcdHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcclxuXHJcblx0XHRcdHJldHVybiBiLnogLSBhLno7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggYS5pZCAhPT0gYi5pZCApIHtcclxuXHJcblx0XHRcdHJldHVybiBhLmlkIC0gYi5pZDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cmV0dXJuIDA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGNsaXBMaW5lKCBzMSwgczIgKSB7XHJcblxyXG5cdFx0dmFyIGFscGhhMSA9IDAsIGFscGhhMiA9IDEsXHJcblxyXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSBib3VuZGFyeSBjb29yZGluYXRlIG9mIGVhY2ggdmVydGV4IGZvciB0aGUgbmVhciBhbmQgZmFyIGNsaXAgcGxhbmVzLFxyXG5cdFx0Ly8gWiA9IC0xIGFuZCBaID0gKzEsIHJlc3BlY3RpdmVseS5cclxuXHRcdGJjMW5lYXIgPSAgczEueiArIHMxLncsXHJcblx0XHRiYzJuZWFyID0gIHMyLnogKyBzMi53LFxyXG5cdFx0YmMxZmFyID0gIC0gczEueiArIHMxLncsXHJcblx0XHRiYzJmYXIgPSAgLSBzMi56ICsgczIudztcclxuXHJcblx0XHRpZiAoIGJjMW5lYXIgPj0gMCAmJiBiYzJuZWFyID49IDAgJiYgYmMxZmFyID49IDAgJiYgYmMyZmFyID49IDAgKSB7XHJcblxyXG5cdFx0XHQvLyBCb3RoIHZlcnRpY2VzIGxpZSBlbnRpcmVseSB3aXRoaW4gYWxsIGNsaXAgcGxhbmVzLlxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKCAoIGJjMW5lYXIgPCAwICYmIGJjMm5lYXIgPCAwICkgfHwgKCBiYzFmYXIgPCAwICYmIGJjMmZhciA8IDAgKSApIHtcclxuXHJcblx0XHRcdC8vIEJvdGggdmVydGljZXMgbGllIGVudGlyZWx5IG91dHNpZGUgb25lIG9mIHRoZSBjbGlwIHBsYW5lcy5cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBUaGUgbGluZSBzZWdtZW50IHNwYW5zIGF0IGxlYXN0IG9uZSBjbGlwIHBsYW5lLlxyXG5cclxuXHRcdFx0aWYgKCBiYzFuZWFyIDwgMCApIHtcclxuXHJcblx0XHRcdFx0Ly8gdjEgbGllcyBvdXRzaWRlIHRoZSBuZWFyIHBsYW5lLCB2MiBpbnNpZGVcclxuXHRcdFx0XHRhbHBoYTEgPSBNYXRoLm1heCggYWxwaGExLCBiYzFuZWFyIC8gKCBiYzFuZWFyIC0gYmMybmVhciApICk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBiYzJuZWFyIDwgMCApIHtcclxuXHJcblx0XHRcdFx0Ly8gdjIgbGllcyBvdXRzaWRlIHRoZSBuZWFyIHBsYW5lLCB2MSBpbnNpZGVcclxuXHRcdFx0XHRhbHBoYTIgPSBNYXRoLm1pbiggYWxwaGEyLCBiYzFuZWFyIC8gKCBiYzFuZWFyIC0gYmMybmVhciApICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGJjMWZhciA8IDAgKSB7XHJcblxyXG5cdFx0XHRcdC8vIHYxIGxpZXMgb3V0c2lkZSB0aGUgZmFyIHBsYW5lLCB2MiBpbnNpZGVcclxuXHRcdFx0XHRhbHBoYTEgPSBNYXRoLm1heCggYWxwaGExLCBiYzFmYXIgLyAoIGJjMWZhciAtIGJjMmZhciApICk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBiYzJmYXIgPCAwICkge1xyXG5cclxuXHRcdFx0XHQvLyB2MiBsaWVzIG91dHNpZGUgdGhlIGZhciBwbGFuZSwgdjIgaW5zaWRlXHJcblx0XHRcdFx0YWxwaGEyID0gTWF0aC5taW4oIGFscGhhMiwgYmMxZmFyIC8gKCBiYzFmYXIgLSBiYzJmYXIgKSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBhbHBoYTIgPCBhbHBoYTEgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRoZSBsaW5lIHNlZ21lbnQgc3BhbnMgdHdvIGJvdW5kYXJpZXMsIGJ1dCBpcyBvdXRzaWRlIGJvdGggb2YgdGhlbS5cclxuXHRcdFx0XHQvLyAoVGhpcyBjYW4ndCBoYXBwZW4gd2hlbiB3ZSdyZSBvbmx5IGNsaXBwaW5nIGFnYWluc3QganVzdCBuZWFyL2ZhciBidXQgZ29vZFxyXG5cdFx0XHRcdC8vICB0byBsZWF2ZSB0aGUgY2hlY2sgaGVyZSBmb3IgZnV0dXJlIHVzYWdlIGlmIG90aGVyIGNsaXAgcGxhbmVzIGFyZSBhZGRlZC4pXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBzMSBhbmQgczIgdmVydGljZXMgdG8gbWF0Y2ggdGhlIGNsaXBwZWQgbGluZSBzZWdtZW50LlxyXG5cdFx0XHRcdHMxLmxlcnAoIHMyLCBhbHBoYTEgKTtcclxuXHRcdFx0XHRzMi5sZXJwKCBzMSwgMSAtIGFscGhhMiApO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn07XHJcbiJdfQ==