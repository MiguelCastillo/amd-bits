'use strict';

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author julianwa / https://github.com/julianwa
 */

THREE.RenderableObject = function () {

		this.id = 0;

		this.object = null;
		this.z = 0;
		this.renderOrder = 0;
};

//

THREE.RenderableFace = function () {

		this.id = 0;

		this.v1 = new THREE.RenderableVertex();
		this.v2 = new THREE.RenderableVertex();
		this.v3 = new THREE.RenderableVertex();

		this.normalModel = new THREE.Vector3();

		this.vertexNormalsModel = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];
		this.vertexNormalsLength = 0;

		this.color = new THREE.Color();
		this.material = null;
		this.uvs = [new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2()];

		this.z = 0;
		this.renderOrder = 0;
};

//

THREE.RenderableVertex = function () {

		this.position = new THREE.Vector3();
		this.positionWorld = new THREE.Vector3();
		this.positionScreen = new THREE.Vector4();

		this.visible = true;
};

THREE.RenderableVertex.prototype.copy = function (vertex) {

		this.positionWorld.copy(vertex.positionWorld);
		this.positionScreen.copy(vertex.positionScreen);
};

//

THREE.RenderableLine = function () {

		this.id = 0;

		this.v1 = new THREE.RenderableVertex();
		this.v2 = new THREE.RenderableVertex();

		this.vertexColors = [new THREE.Color(), new THREE.Color()];
		this.material = null;

		this.z = 0;
		this.renderOrder = 0;
};

//

THREE.RenderableSprite = function () {

		this.id = 0;

		this.object = null;

		this.x = 0;
		this.y = 0;
		this.z = 0;

		this.rotation = 0;
		this.scale = new THREE.Vector2();

		this.material = null;
		this.renderOrder = 0;
};

//

THREE.Projector = function () {

		var _object,
		    _objectCount,
		    _objectPool = [],
		    _objectPoolLength = 0,
		    _vertex,
		    _vertexCount,
		    _vertexPool = [],
		    _vertexPoolLength = 0,
		    _face,
		    _faceCount,
		    _facePool = [],
		    _facePoolLength = 0,
		    _line,
		    _lineCount,
		    _linePool = [],
		    _linePoolLength = 0,
		    _sprite,
		    _spriteCount,
		    _spritePool = [],
		    _spritePoolLength = 0,
		    _renderData = { objects: [], lights: [], elements: [] },
		    _vector3 = new THREE.Vector3(),
		    _vector4 = new THREE.Vector4(),
		    _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)),
		    _boundingBox = new THREE.Box3(),
		    _points3 = new Array(3),
		    _points4 = new Array(4),
		    _viewMatrix = new THREE.Matrix4(),
		    _viewProjectionMatrix = new THREE.Matrix4(),
		    _modelMatrix,
		    _modelViewProjectionMatrix = new THREE.Matrix4(),
		    _normalMatrix = new THREE.Matrix3(),
		    _frustum = new THREE.Frustum(),
		    _clippedVertex1PositionScreen = new THREE.Vector4(),
		    _clippedVertex2PositionScreen = new THREE.Vector4();

		//

		this.projectVector = function (vector, camera) {

				console.warn('THREE.Projector: .projectVector() is now vector.project().');
				vector.project(camera);
		};

		this.unprojectVector = function (vector, camera) {

				console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');
				vector.unproject(camera);
		};

		this.pickingRay = function (vector, camera) {

				console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');
		};

		//

		var RenderList = function RenderList() {

				var normals = [];
				var uvs = [];

				var object = null;
				var material = null;

				var normalMatrix = new THREE.Matrix3();

				function setObject(value) {

						object = value;
						material = object.material;

						normalMatrix.getNormalMatrix(object.matrixWorld);

						normals.length = 0;
						uvs.length = 0;
				}

				function projectVertex(vertex) {

						var position = vertex.position;
						var positionWorld = vertex.positionWorld;
						var positionScreen = vertex.positionScreen;

						positionWorld.copy(position).applyMatrix4(_modelMatrix);
						positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);

						var invW = 1 / positionScreen.w;

						positionScreen.x *= invW;
						positionScreen.y *= invW;
						positionScreen.z *= invW;

						vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;
				}

				function pushVertex(x, y, z) {

						_vertex = getNextVertexInPool();
						_vertex.position.set(x, y, z);

						projectVertex(_vertex);
				}

				function pushNormal(x, y, z) {

						normals.push(x, y, z);
				}

				function pushUv(x, y) {

						uvs.push(x, y);
				}

				function checkTriangleVisibility(v1, v2, v3) {

						if (v1.visible === true || v2.visible === true || v3.visible === true) return true;

						_points3[0] = v1.positionScreen;
						_points3[1] = v2.positionScreen;
						_points3[2] = v3.positionScreen;

						return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));
				}

				function checkBackfaceCulling(v1, v2, v3) {

						return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;
				}

				function pushLine(a, b) {

						var v1 = _vertexPool[a];
						var v2 = _vertexPool[b];

						_line = getNextLineInPool();

						_line.id = object.id;
						_line.v1.copy(v1);
						_line.v2.copy(v2);
						_line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;
						_line.renderOrder = object.renderOrder;

						_line.material = object.material;

						_renderData.elements.push(_line);
				}

				function pushTriangle(a, b, c) {

						var v1 = _vertexPool[a];
						var v2 = _vertexPool[b];
						var v3 = _vertexPool[c];

						if (checkTriangleVisibility(v1, v2, v3) === false) return;

						if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {

								_face = getNextFaceInPool();

								_face.id = object.id;
								_face.v1.copy(v1);
								_face.v2.copy(v2);
								_face.v3.copy(v3);
								_face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;
								_face.renderOrder = object.renderOrder;

								// use first vertex normal as face normal

								_face.normalModel.fromArray(normals, a * 3);
								_face.normalModel.applyMatrix3(normalMatrix).normalize();

								for (var i = 0; i < 3; i++) {

										var normal = _face.vertexNormalsModel[i];
										normal.fromArray(normals, arguments[i] * 3);
										normal.applyMatrix3(normalMatrix).normalize();

										var uv = _face.uvs[i];
										uv.fromArray(uvs, arguments[i] * 2);
								}

								_face.vertexNormalsLength = 3;

								_face.material = object.material;

								_renderData.elements.push(_face);
						}
				}

				return {
						setObject: setObject,
						projectVertex: projectVertex,
						checkTriangleVisibility: checkTriangleVisibility,
						checkBackfaceCulling: checkBackfaceCulling,
						pushVertex: pushVertex,
						pushNormal: pushNormal,
						pushUv: pushUv,
						pushLine: pushLine,
						pushTriangle: pushTriangle
				};
		};

		var renderList = new RenderList();

		this.projectScene = function (scene, camera, sortObjects, sortElements) {

				_faceCount = 0;
				_lineCount = 0;
				_spriteCount = 0;

				_renderData.elements.length = 0;

				if (scene.autoUpdate === true) scene.updateMatrixWorld();
				if (camera.parent === null) camera.updateMatrixWorld();

				_viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));
				_viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);

				_frustum.setFromMatrix(_viewProjectionMatrix);

				//

				_objectCount = 0;

				_renderData.objects.length = 0;
				_renderData.lights.length = 0;

				scene.traverseVisible(function (object) {

						if (object instanceof THREE.Light) {

								_renderData.lights.push(object);
						} else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {

								var material = object.material;

								if (material.visible === false) return;

								if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {

										_object = getNextObjectInPool();
										_object.id = object.id;
										_object.object = object;

										_vector3.setFromMatrixPosition(object.matrixWorld);
										_vector3.applyProjection(_viewProjectionMatrix);
										_object.z = _vector3.z;
										_object.renderOrder = object.renderOrder;

										_renderData.objects.push(_object);
								}
						}
				});

				if (sortObjects === true) {

						_renderData.objects.sort(painterSort);
				}

				//

				for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {

						var object = _renderData.objects[o].object;
						var geometry = object.geometry;

						renderList.setObject(object);

						_modelMatrix = object.matrixWorld;

						_vertexCount = 0;

						if (object instanceof THREE.Mesh) {

								if (geometry instanceof THREE.BufferGeometry) {

										var attributes = geometry.attributes;
										var groups = geometry.groups;

										if (attributes.position === undefined) continue;

										var positions = attributes.position.array;

										for (var i = 0, l = positions.length; i < l; i += 3) {

												renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);
										}

										if (attributes.normal !== undefined) {

												var normals = attributes.normal.array;

												for (var i = 0, l = normals.length; i < l; i += 3) {

														renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);
												}
										}

										if (attributes.uv !== undefined) {

												var uvs = attributes.uv.array;

												for (var i = 0, l = uvs.length; i < l; i += 2) {

														renderList.pushUv(uvs[i], uvs[i + 1]);
												}
										}

										if (geometry.index !== null) {

												var indices = geometry.index.array;

												if (groups.length > 0) {

														for (var o = 0; o < groups.length; o++) {

																var group = groups[o];

																for (var i = group.start, l = group.start + group.count; i < l; i += 3) {

																		renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);
																}
														}
												} else {

														for (var i = 0, l = indices.length; i < l; i += 3) {

																renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);
														}
												}
										} else {

												for (var i = 0, l = positions.length / 3; i < l; i += 3) {

														renderList.pushTriangle(i, i + 1, i + 2);
												}
										}
								} else if (geometry instanceof THREE.Geometry) {

										var vertices = geometry.vertices;
										var faces = geometry.faces;
										var faceVertexUvs = geometry.faceVertexUvs[0];

										_normalMatrix.getNormalMatrix(_modelMatrix);

										var material = object.material;

										var isFaceMaterial = material instanceof THREE.MultiMaterial;
										var objectMaterials = isFaceMaterial === true ? object.material : null;

										for (var v = 0, vl = vertices.length; v < vl; v++) {

												var vertex = vertices[v];

												_vector3.copy(vertex);

												if (material.morphTargets === true) {

														var morphTargets = geometry.morphTargets;
														var morphInfluences = object.morphTargetInfluences;

														for (var t = 0, tl = morphTargets.length; t < tl; t++) {

																var influence = morphInfluences[t];

																if (influence === 0) continue;

																var target = morphTargets[t];
																var targetVertex = target.vertices[v];

																_vector3.x += (targetVertex.x - vertex.x) * influence;
																_vector3.y += (targetVertex.y - vertex.y) * influence;
																_vector3.z += (targetVertex.z - vertex.z) * influence;
														}
												}

												renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);
										}

										for (var f = 0, fl = faces.length; f < fl; f++) {

												var face = faces[f];

												material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;

												if (material === undefined) continue;

												var side = material.side;

												var v1 = _vertexPool[face.a];
												var v2 = _vertexPool[face.b];
												var v3 = _vertexPool[face.c];

												if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;

												var visible = renderList.checkBackfaceCulling(v1, v2, v3);

												if (side !== THREE.DoubleSide) {

														if (side === THREE.FrontSide && visible === false) continue;
														if (side === THREE.BackSide && visible === true) continue;
												}

												_face = getNextFaceInPool();

												_face.id = object.id;
												_face.v1.copy(v1);
												_face.v2.copy(v2);
												_face.v3.copy(v3);

												_face.normalModel.copy(face.normal);

												if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {

														_face.normalModel.negate();
												}

												_face.normalModel.applyMatrix3(_normalMatrix).normalize();

												var faceVertexNormals = face.vertexNormals;

												for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {

														var normalModel = _face.vertexNormalsModel[n];
														normalModel.copy(faceVertexNormals[n]);

														if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {

																normalModel.negate();
														}

														normalModel.applyMatrix3(_normalMatrix).normalize();
												}

												_face.vertexNormalsLength = faceVertexNormals.length;

												var vertexUvs = faceVertexUvs[f];

												if (vertexUvs !== undefined) {

														for (var u = 0; u < 3; u++) {

																_face.uvs[u].copy(vertexUvs[u]);
														}
												}

												_face.color = face.color;
												_face.material = material;

												_face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;
												_face.renderOrder = object.renderOrder;

												_renderData.elements.push(_face);
										}
								}
						} else if (object instanceof THREE.Line) {

								if (geometry instanceof THREE.BufferGeometry) {

										var attributes = geometry.attributes;

										if (attributes.position !== undefined) {

												var positions = attributes.position.array;

												for (var i = 0, l = positions.length; i < l; i += 3) {

														renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);
												}

												if (geometry.index !== null) {

														var indices = geometry.index.array;

														for (var i = 0, l = indices.length; i < l; i += 2) {

																renderList.pushLine(indices[i], indices[i + 1]);
														}
												} else {

														var step = object instanceof THREE.LineSegments ? 2 : 1;

														for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {

																renderList.pushLine(i, i + 1);
														}
												}
										}
								} else if (geometry instanceof THREE.Geometry) {

										_modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);

										var vertices = object.geometry.vertices;

										if (vertices.length === 0) continue;

										v1 = getNextVertexInPool();
										v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);

										var step = object instanceof THREE.LineSegments ? 2 : 1;

										for (var v = 1, vl = vertices.length; v < vl; v++) {

												v1 = getNextVertexInPool();
												v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);

												if ((v + 1) % step > 0) continue;

												v2 = _vertexPool[_vertexCount - 2];

												_clippedVertex1PositionScreen.copy(v1.positionScreen);
												_clippedVertex2PositionScreen.copy(v2.positionScreen);

												if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {

														// Perform the perspective divide
														_clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);
														_clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);

														_line = getNextLineInPool();

														_line.id = object.id;
														_line.v1.positionScreen.copy(_clippedVertex1PositionScreen);
														_line.v2.positionScreen.copy(_clippedVertex2PositionScreen);

														_line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);
														_line.renderOrder = object.renderOrder;

														_line.material = object.material;

														if (object.material.vertexColors === THREE.VertexColors) {

																_line.vertexColors[0].copy(object.geometry.colors[v]);
																_line.vertexColors[1].copy(object.geometry.colors[v - 1]);
														}

														_renderData.elements.push(_line);
												}
										}
								}
						} else if (object instanceof THREE.Sprite) {

								_vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);
								_vector4.applyMatrix4(_viewProjectionMatrix);

								var invW = 1 / _vector4.w;

								_vector4.z *= invW;

								if (_vector4.z >= -1 && _vector4.z <= 1) {

										_sprite = getNextSpriteInPool();
										_sprite.id = object.id;
										_sprite.x = _vector4.x * invW;
										_sprite.y = _vector4.y * invW;
										_sprite.z = _vector4.z;
										_sprite.renderOrder = object.renderOrder;
										_sprite.object = object;

										_sprite.rotation = object.rotation;

										_sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));
										_sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));

										_sprite.material = object.material;

										_renderData.elements.push(_sprite);
								}
						}
				}

				if (sortElements === true) {

						_renderData.elements.sort(painterSort);
				}

				return _renderData;
		};

		// Pools

		function getNextObjectInPool() {

				if (_objectCount === _objectPoolLength) {

						var object = new THREE.RenderableObject();
						_objectPool.push(object);
						_objectPoolLength++;
						_objectCount++;
						return object;
				}

				return _objectPool[_objectCount++];
		}

		function getNextVertexInPool() {

				if (_vertexCount === _vertexPoolLength) {

						var vertex = new THREE.RenderableVertex();
						_vertexPool.push(vertex);
						_vertexPoolLength++;
						_vertexCount++;
						return vertex;
				}

				return _vertexPool[_vertexCount++];
		}

		function getNextFaceInPool() {

				if (_faceCount === _facePoolLength) {

						var face = new THREE.RenderableFace();
						_facePool.push(face);
						_facePoolLength++;
						_faceCount++;
						return face;
				}

				return _facePool[_faceCount++];
		}

		function getNextLineInPool() {

				if (_lineCount === _linePoolLength) {

						var line = new THREE.RenderableLine();
						_linePool.push(line);
						_linePoolLength++;
						_lineCount++;
						return line;
				}

				return _linePool[_lineCount++];
		}

		function getNextSpriteInPool() {

				if (_spriteCount === _spritePoolLength) {

						var sprite = new THREE.RenderableSprite();
						_spritePool.push(sprite);
						_spritePoolLength++;
						_spriteCount++;
						return sprite;
				}

				return _spritePool[_spriteCount++];
		}

		//

		function painterSort(a, b) {

				if (a.renderOrder !== b.renderOrder) {

						return a.renderOrder - b.renderOrder;
				} else if (a.z !== b.z) {

						return b.z - a.z;
				} else if (a.id !== b.id) {

						return a.id - b.id;
				} else {

						return 0;
				}
		}

		function clipLine(s1, s2) {

				var alpha1 = 0,
				    alpha2 = 1,


				// Calculate the boundary coordinate of each vertex for the near and far clip planes,
				// Z = -1 and Z = +1, respectively.
				bc1near = s1.z + s1.w,
				    bc2near = s2.z + s2.w,
				    bc1far = -s1.z + s1.w,
				    bc2far = -s2.z + s2.w;

				if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {

						// Both vertices lie entirely within all clip planes.
						return true;
				} else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {

						// Both vertices lie entirely outside one of the clip planes.
						return false;
				} else {

						// The line segment spans at least one clip plane.

						if (bc1near < 0) {

								// v1 lies outside the near plane, v2 inside
								alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));
						} else if (bc2near < 0) {

								// v2 lies outside the near plane, v1 inside
								alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));
						}

						if (bc1far < 0) {

								// v1 lies outside the far plane, v2 inside
								alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));
						} else if (bc2far < 0) {

								// v2 lies outside the far plane, v2 inside
								alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));
						}

						if (alpha2 < alpha1) {

								// The line segment spans two boundaries, but is outside both of them.
								// (This can't happen when we're only clipping against just near/far but good
								//  to leave the check here for future usage if other clip planes are added.)
								return false;
						} else {

								// Update the s1 and s2 vertices to match the clipped line segment.
								s1.lerp(s2, alpha1);
								s2.lerp(s1, 1 - alpha2);

								return true;
						}
				}
		}
};
//# sourceMappingURL=data:application/json;base64,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QWM7OztBQUdqRSxhQUFPLElBQVAsQ0FIaUU7S0FBbEUsTUFLTyxJQUFLLE9BQUUsR0FBVSxDQUFWLElBQWUsVUFBVSxDQUFWLElBQW1CLFNBQVMsQ0FBVCxJQUFjLFNBQVMsQ0FBVCxFQUFlOzs7QUFHNUUsYUFBTyxLQUFQLENBSDRFO0tBQXRFLE1BS0E7Ozs7QUFJTixVQUFLLFVBQVUsQ0FBVixFQUFjOzs7QUFHbEIsaUJBQVMsS0FBSyxHQUFMLENBQVUsTUFBVixFQUFrQixXQUFZLFVBQVUsT0FBVixDQUFaLENBQTNCLENBSGtCO09BQW5CLE1BS08sSUFBSyxVQUFVLENBQVYsRUFBYzs7O0FBR3pCLGlCQUFTLEtBQUssR0FBTCxDQUFVLE1BQVYsRUFBa0IsV0FBWSxVQUFVLE9BQVYsQ0FBWixDQUEzQixDQUh5QjtPQUFuQjs7QUFPUCxVQUFLLFNBQVMsQ0FBVCxFQUFhOzs7QUFHakIsaUJBQVMsS0FBSyxHQUFMLENBQVUsTUFBVixFQUFrQixVQUFXLFNBQVMsTUFBVCxDQUFYLENBQTNCLENBSGlCO09BQWxCLE1BS08sSUFBSyxTQUFTLENBQVQsRUFBYTs7O0FBR3hCLGlCQUFTLEtBQUssR0FBTCxDQUFVLE1BQVYsRUFBa0IsVUFBVyxTQUFTLE1BQVQsQ0FBWCxDQUEzQixDQUh3QjtPQUFsQjs7QUFPUCxVQUFLLFNBQVMsTUFBVCxFQUFrQjs7Ozs7QUFLdEIsZUFBTyxLQUFQLENBTHNCO09BQXZCLE1BT087OztBQUdOLFdBQUcsSUFBSCxDQUFTLEVBQVQsRUFBYSxNQUFiLEVBSE07QUFJTixXQUFHLElBQUgsQ0FBUyxFQUFULEVBQWEsSUFBSSxNQUFKLENBQWIsQ0FKTTs7QUFNTixlQUFPLElBQVAsQ0FOTTtPQVBQO0tBakNNO0dBaEJSO0NBaHZCaUIiLCJmaWxlIjoiUHJvamVjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXHJcbiAqIEBhdXRob3IganVsaWFud2EgLyBodHRwczovL2dpdGh1Yi5jb20vanVsaWFud2FcclxuICovXHJcblxyXG5USFJFRS5SZW5kZXJhYmxlT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLmlkID0gMDtcclxuXHJcblx0dGhpcy5vYmplY3QgPSBudWxsO1xyXG5cdHRoaXMueiA9IDA7XHJcblx0dGhpcy5yZW5kZXJPcmRlciA9IDA7XHJcblxyXG59O1xyXG5cclxuLy9cclxuXHJcblRIUkVFLlJlbmRlcmFibGVGYWNlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLmlkID0gMDtcclxuXHJcblx0dGhpcy52MSA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlVmVydGV4KCk7XHJcblx0dGhpcy52MiA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlVmVydGV4KCk7XHJcblx0dGhpcy52MyA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlVmVydGV4KCk7XHJcblxyXG5cdHRoaXMubm9ybWFsTW9kZWwgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cclxuXHR0aGlzLnZlcnRleE5vcm1hbHNNb2RlbCA9IFsgbmV3IFRIUkVFLlZlY3RvcjMoKSwgbmV3IFRIUkVFLlZlY3RvcjMoKSwgbmV3IFRIUkVFLlZlY3RvcjMoKSBdO1xyXG5cdHRoaXMudmVydGV4Tm9ybWFsc0xlbmd0aCA9IDA7XHJcblxyXG5cdHRoaXMuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKTtcclxuXHR0aGlzLm1hdGVyaWFsID0gbnVsbDtcclxuXHR0aGlzLnV2cyA9IFsgbmV3IFRIUkVFLlZlY3RvcjIoKSwgbmV3IFRIUkVFLlZlY3RvcjIoKSwgbmV3IFRIUkVFLlZlY3RvcjIoKSBdO1xyXG5cclxuXHR0aGlzLnogPSAwO1xyXG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xyXG5cclxufTtcclxuXHJcbi8vXHJcblxyXG5USFJFRS5SZW5kZXJhYmxlVmVydGV4ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLnBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHR0aGlzLnBvc2l0aW9uV29ybGQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cdHRoaXMucG9zaXRpb25TY3JlZW4gPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xyXG5cclxuXHR0aGlzLnZpc2libGUgPSB0cnVlO1xyXG5cclxufTtcclxuXHJcblRIUkVFLlJlbmRlcmFibGVWZXJ0ZXgucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHZlcnRleCApIHtcclxuXHJcblx0dGhpcy5wb3NpdGlvbldvcmxkLmNvcHkoIHZlcnRleC5wb3NpdGlvbldvcmxkICk7XHJcblx0dGhpcy5wb3NpdGlvblNjcmVlbi5jb3B5KCB2ZXJ0ZXgucG9zaXRpb25TY3JlZW4gKTtcclxuXHJcbn07XHJcblxyXG4vL1xyXG5cclxuVEhSRUUuUmVuZGVyYWJsZUxpbmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMuaWQgPSAwO1xyXG5cclxuXHR0aGlzLnYxID0gbmV3IFRIUkVFLlJlbmRlcmFibGVWZXJ0ZXgoKTtcclxuXHR0aGlzLnYyID0gbmV3IFRIUkVFLlJlbmRlcmFibGVWZXJ0ZXgoKTtcclxuXHJcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBbIG5ldyBUSFJFRS5Db2xvcigpLCBuZXcgVEhSRUUuQ29sb3IoKSBdO1xyXG5cdHRoaXMubWF0ZXJpYWwgPSBudWxsO1xyXG5cclxuXHR0aGlzLnogPSAwO1xyXG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xyXG5cclxufTtcclxuXHJcbi8vXHJcblxyXG5USFJFRS5SZW5kZXJhYmxlU3ByaXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLmlkID0gMDtcclxuXHJcblx0dGhpcy5vYmplY3QgPSBudWxsO1xyXG5cclxuXHR0aGlzLnggPSAwO1xyXG5cdHRoaXMueSA9IDA7XHJcblx0dGhpcy56ID0gMDtcclxuXHJcblx0dGhpcy5yb3RhdGlvbiA9IDA7XHJcblx0dGhpcy5zY2FsZSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XHJcblxyXG5cdHRoaXMubWF0ZXJpYWwgPSBudWxsO1xyXG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xyXG5cclxufTtcclxuXHJcbi8vXHJcblxyXG5USFJFRS5Qcm9qZWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHZhciBfb2JqZWN0LCBfb2JqZWN0Q291bnQsIF9vYmplY3RQb29sID0gW10sIF9vYmplY3RQb29sTGVuZ3RoID0gMCxcclxuXHRfdmVydGV4LCBfdmVydGV4Q291bnQsIF92ZXJ0ZXhQb29sID0gW10sIF92ZXJ0ZXhQb29sTGVuZ3RoID0gMCxcclxuXHRfZmFjZSwgX2ZhY2VDb3VudCwgX2ZhY2VQb29sID0gW10sIF9mYWNlUG9vbExlbmd0aCA9IDAsXHJcblx0X2xpbmUsIF9saW5lQ291bnQsIF9saW5lUG9vbCA9IFtdLCBfbGluZVBvb2xMZW5ndGggPSAwLFxyXG5cdF9zcHJpdGUsIF9zcHJpdGVDb3VudCwgX3Nwcml0ZVBvb2wgPSBbXSwgX3Nwcml0ZVBvb2xMZW5ndGggPSAwLFxyXG5cclxuXHRfcmVuZGVyRGF0YSA9IHsgb2JqZWN0czogW10sIGxpZ2h0czogW10sIGVsZW1lbnRzOiBbXSB9LFxyXG5cclxuXHRfdmVjdG9yMyA9IG5ldyBUSFJFRS5WZWN0b3IzKCksXHJcblx0X3ZlY3RvcjQgPSBuZXcgVEhSRUUuVmVjdG9yNCgpLFxyXG5cclxuXHRfY2xpcEJveCA9IG5ldyBUSFJFRS5Cb3gzKCBuZXcgVEhSRUUuVmVjdG9yMyggLSAxLCAtIDEsIC0gMSApLCBuZXcgVEhSRUUuVmVjdG9yMyggMSwgMSwgMSApICksXHJcblx0X2JvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoKSxcclxuXHRfcG9pbnRzMyA9IG5ldyBBcnJheSggMyApLFxyXG5cdF9wb2ludHM0ID0gbmV3IEFycmF5KCA0ICksXHJcblxyXG5cdF92aWV3TWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKSxcclxuXHRfdmlld1Byb2plY3Rpb25NYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpLFxyXG5cclxuXHRfbW9kZWxNYXRyaXgsXHJcblx0X21vZGVsVmlld1Byb2plY3Rpb25NYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpLFxyXG5cclxuXHRfbm9ybWFsTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDMoKSxcclxuXHJcblx0X2ZydXN0dW0gPSBuZXcgVEhSRUUuRnJ1c3R1bSgpLFxyXG5cclxuXHRfY2xpcHBlZFZlcnRleDFQb3NpdGlvblNjcmVlbiA9IG5ldyBUSFJFRS5WZWN0b3I0KCksXHJcblx0X2NsaXBwZWRWZXJ0ZXgyUG9zaXRpb25TY3JlZW4gPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xyXG5cclxuXHQvL1xyXG5cclxuXHR0aGlzLnByb2plY3RWZWN0b3IgPSBmdW5jdGlvbiAoIHZlY3RvciwgY2FtZXJhICkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlByb2plY3RvcjogLnByb2plY3RWZWN0b3IoKSBpcyBub3cgdmVjdG9yLnByb2plY3QoKS4nICk7XHJcblx0XHR2ZWN0b3IucHJvamVjdCggY2FtZXJhICk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMudW5wcm9qZWN0VmVjdG9yID0gZnVuY3Rpb24gKCB2ZWN0b3IsIGNhbWVyYSApIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Qcm9qZWN0b3I6IC51bnByb2plY3RWZWN0b3IoKSBpcyBub3cgdmVjdG9yLnVucHJvamVjdCgpLicgKTtcclxuXHRcdHZlY3Rvci51bnByb2plY3QoIGNhbWVyYSApO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnBpY2tpbmdSYXkgPSBmdW5jdGlvbiAoIHZlY3RvciwgY2FtZXJhICkge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9qZWN0b3I6IC5waWNraW5nUmF5KCkgaXMgbm93IHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKCkuJyApO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvL1xyXG5cclxuXHR2YXIgUmVuZGVyTGlzdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdFx0dmFyIHV2cyA9IFtdO1xyXG5cclxuXHRcdHZhciBvYmplY3QgPSBudWxsO1xyXG5cdFx0dmFyIG1hdGVyaWFsID0gbnVsbDtcclxuXHJcblx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDMoKTtcclxuXHJcblx0XHRmdW5jdGlvbiBzZXRPYmplY3QoIHZhbHVlICkge1xyXG5cclxuXHRcdFx0b2JqZWN0ID0gdmFsdWU7XHJcblx0XHRcdG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xyXG5cclxuXHRcdFx0bm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XHJcblxyXG5cdFx0XHRub3JtYWxzLmxlbmd0aCA9IDA7XHJcblx0XHRcdHV2cy5sZW5ndGggPSAwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwcm9qZWN0VmVydGV4KCB2ZXJ0ZXggKSB7XHJcblxyXG5cdFx0XHR2YXIgcG9zaXRpb24gPSB2ZXJ0ZXgucG9zaXRpb247XHJcblx0XHRcdHZhciBwb3NpdGlvbldvcmxkID0gdmVydGV4LnBvc2l0aW9uV29ybGQ7XHJcblx0XHRcdHZhciBwb3NpdGlvblNjcmVlbiA9IHZlcnRleC5wb3NpdGlvblNjcmVlbjtcclxuXHJcblx0XHRcdHBvc2l0aW9uV29ybGQuY29weSggcG9zaXRpb24gKS5hcHBseU1hdHJpeDQoIF9tb2RlbE1hdHJpeCApO1xyXG5cdFx0XHRwb3NpdGlvblNjcmVlbi5jb3B5KCBwb3NpdGlvbldvcmxkICkuYXBwbHlNYXRyaXg0KCBfdmlld1Byb2plY3Rpb25NYXRyaXggKTtcclxuXHJcblx0XHRcdHZhciBpbnZXID0gMSAvIHBvc2l0aW9uU2NyZWVuLnc7XHJcblxyXG5cdFx0XHRwb3NpdGlvblNjcmVlbi54ICo9IGludlc7XHJcblx0XHRcdHBvc2l0aW9uU2NyZWVuLnkgKj0gaW52VztcclxuXHRcdFx0cG9zaXRpb25TY3JlZW4ueiAqPSBpbnZXO1xyXG5cclxuXHRcdFx0dmVydGV4LnZpc2libGUgPSBwb3NpdGlvblNjcmVlbi54ID49IC0gMSAmJiBwb3NpdGlvblNjcmVlbi54IDw9IDEgJiZcclxuXHRcdFx0XHRcdCBwb3NpdGlvblNjcmVlbi55ID49IC0gMSAmJiBwb3NpdGlvblNjcmVlbi55IDw9IDEgJiZcclxuXHRcdFx0XHRcdCBwb3NpdGlvblNjcmVlbi56ID49IC0gMSAmJiBwb3NpdGlvblNjcmVlbi56IDw9IDE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHB1c2hWZXJ0ZXgoIHgsIHksIHogKSB7XHJcblxyXG5cdFx0XHRfdmVydGV4ID0gZ2V0TmV4dFZlcnRleEluUG9vbCgpO1xyXG5cdFx0XHRfdmVydGV4LnBvc2l0aW9uLnNldCggeCwgeSwgeiApO1xyXG5cclxuXHRcdFx0cHJvamVjdFZlcnRleCggX3ZlcnRleCApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBwdXNoTm9ybWFsKCB4LCB5LCB6ICkge1xyXG5cclxuXHRcdFx0bm9ybWFscy5wdXNoKCB4LCB5LCB6ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHB1c2hVdiggeCwgeSApIHtcclxuXHJcblx0XHRcdHV2cy5wdXNoKCB4LCB5ICk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNoZWNrVHJpYW5nbGVWaXNpYmlsaXR5KCB2MSwgdjIsIHYzICkge1xyXG5cclxuXHRcdFx0aWYgKCB2MS52aXNpYmxlID09PSB0cnVlIHx8IHYyLnZpc2libGUgPT09IHRydWUgfHwgdjMudmlzaWJsZSA9PT0gdHJ1ZSApIHJldHVybiB0cnVlO1xyXG5cclxuXHRcdFx0X3BvaW50czNbIDAgXSA9IHYxLnBvc2l0aW9uU2NyZWVuO1xyXG5cdFx0XHRfcG9pbnRzM1sgMSBdID0gdjIucG9zaXRpb25TY3JlZW47XHJcblx0XHRcdF9wb2ludHMzWyAyIF0gPSB2My5wb3NpdGlvblNjcmVlbjtcclxuXHJcblx0XHRcdHJldHVybiBfY2xpcEJveC5pbnRlcnNlY3RzQm94KCBfYm91bmRpbmdCb3guc2V0RnJvbVBvaW50cyggX3BvaW50czMgKSApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjaGVja0JhY2tmYWNlQ3VsbGluZyggdjEsIHYyLCB2MyApIHtcclxuXHJcblx0XHRcdHJldHVybiAoICggdjMucG9zaXRpb25TY3JlZW4ueCAtIHYxLnBvc2l0aW9uU2NyZWVuLnggKSAqXHJcblx0XHRcdFx0ICAgICggdjIucG9zaXRpb25TY3JlZW4ueSAtIHYxLnBvc2l0aW9uU2NyZWVuLnkgKSAtXHJcblx0XHRcdFx0ICAgICggdjMucG9zaXRpb25TY3JlZW4ueSAtIHYxLnBvc2l0aW9uU2NyZWVuLnkgKSAqXHJcblx0XHRcdFx0ICAgICggdjIucG9zaXRpb25TY3JlZW4ueCAtIHYxLnBvc2l0aW9uU2NyZWVuLnggKSApIDwgMDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHVzaExpbmUoIGEsIGIgKSB7XHJcblxyXG5cdFx0XHR2YXIgdjEgPSBfdmVydGV4UG9vbFsgYSBdO1xyXG5cdFx0XHR2YXIgdjIgPSBfdmVydGV4UG9vbFsgYiBdO1xyXG5cclxuXHRcdFx0X2xpbmUgPSBnZXROZXh0TGluZUluUG9vbCgpO1xyXG5cclxuXHRcdFx0X2xpbmUuaWQgPSBvYmplY3QuaWQ7XHJcblx0XHRcdF9saW5lLnYxLmNvcHkoIHYxICk7XHJcblx0XHRcdF9saW5lLnYyLmNvcHkoIHYyICk7XHJcblx0XHRcdF9saW5lLnogPSAoIHYxLnBvc2l0aW9uU2NyZWVuLnogKyB2Mi5wb3NpdGlvblNjcmVlbi56ICkgLyAyO1xyXG5cdFx0XHRfbGluZS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcclxuXHJcblx0XHRcdF9saW5lLm1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xyXG5cclxuXHRcdFx0X3JlbmRlckRhdGEuZWxlbWVudHMucHVzaCggX2xpbmUgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcHVzaFRyaWFuZ2xlKCBhLCBiLCBjICkge1xyXG5cclxuXHRcdFx0dmFyIHYxID0gX3ZlcnRleFBvb2xbIGEgXTtcclxuXHRcdFx0dmFyIHYyID0gX3ZlcnRleFBvb2xbIGIgXTtcclxuXHRcdFx0dmFyIHYzID0gX3ZlcnRleFBvb2xbIGMgXTtcclxuXHJcblx0XHRcdGlmICggY2hlY2tUcmlhbmdsZVZpc2liaWxpdHkoIHYxLCB2MiwgdjMgKSA9PT0gZmFsc2UgKSByZXR1cm47XHJcblxyXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IFRIUkVFLkRvdWJsZVNpZGUgfHwgY2hlY2tCYWNrZmFjZUN1bGxpbmcoIHYxLCB2MiwgdjMgKSA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0X2ZhY2UgPSBnZXROZXh0RmFjZUluUG9vbCgpO1xyXG5cclxuXHRcdFx0XHRfZmFjZS5pZCA9IG9iamVjdC5pZDtcclxuXHRcdFx0XHRfZmFjZS52MS5jb3B5KCB2MSApO1xyXG5cdFx0XHRcdF9mYWNlLnYyLmNvcHkoIHYyICk7XHJcblx0XHRcdFx0X2ZhY2UudjMuY29weSggdjMgKTtcclxuXHRcdFx0XHRfZmFjZS56ID0gKCB2MS5wb3NpdGlvblNjcmVlbi56ICsgdjIucG9zaXRpb25TY3JlZW4ueiArIHYzLnBvc2l0aW9uU2NyZWVuLnogKSAvIDM7XHJcblx0XHRcdFx0X2ZhY2UucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XHJcblxyXG5cdFx0XHRcdC8vIHVzZSBmaXJzdCB2ZXJ0ZXggbm9ybWFsIGFzIGZhY2Ugbm9ybWFsXHJcblxyXG5cdFx0XHRcdF9mYWNlLm5vcm1hbE1vZGVsLmZyb21BcnJheSggbm9ybWFscywgYSAqIDMgKTtcclxuXHRcdFx0XHRfZmFjZS5ub3JtYWxNb2RlbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAzOyBpICsrICkge1xyXG5cclxuXHRcdFx0XHRcdHZhciBub3JtYWwgPSBfZmFjZS52ZXJ0ZXhOb3JtYWxzTW9kZWxbIGkgXTtcclxuXHRcdFx0XHRcdG5vcm1hbC5mcm9tQXJyYXkoIG5vcm1hbHMsIGFyZ3VtZW50c1sgaSBdICogMyApO1xyXG5cdFx0XHRcdFx0bm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHV2ID0gX2ZhY2UudXZzWyBpIF07XHJcblx0XHRcdFx0XHR1di5mcm9tQXJyYXkoIHV2cywgYXJndW1lbnRzWyBpIF0gKiAyICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0X2ZhY2UudmVydGV4Tm9ybWFsc0xlbmd0aCA9IDM7XHJcblxyXG5cdFx0XHRcdF9mYWNlLm1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xyXG5cclxuXHRcdFx0XHRfcmVuZGVyRGF0YS5lbGVtZW50cy5wdXNoKCBfZmFjZSApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRzZXRPYmplY3Q6IHNldE9iamVjdCxcclxuXHRcdFx0cHJvamVjdFZlcnRleDogcHJvamVjdFZlcnRleCxcclxuXHRcdFx0Y2hlY2tUcmlhbmdsZVZpc2liaWxpdHk6IGNoZWNrVHJpYW5nbGVWaXNpYmlsaXR5LFxyXG5cdFx0XHRjaGVja0JhY2tmYWNlQ3VsbGluZzogY2hlY2tCYWNrZmFjZUN1bGxpbmcsXHJcblx0XHRcdHB1c2hWZXJ0ZXg6IHB1c2hWZXJ0ZXgsXHJcblx0XHRcdHB1c2hOb3JtYWw6IHB1c2hOb3JtYWwsXHJcblx0XHRcdHB1c2hVdjogcHVzaFV2LFxyXG5cdFx0XHRwdXNoTGluZTogcHVzaExpbmUsXHJcblx0XHRcdHB1c2hUcmlhbmdsZTogcHVzaFRyaWFuZ2xlXHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdHZhciByZW5kZXJMaXN0ID0gbmV3IFJlbmRlckxpc3QoKTtcclxuXHJcblx0dGhpcy5wcm9qZWN0U2NlbmUgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEsIHNvcnRPYmplY3RzLCBzb3J0RWxlbWVudHMgKSB7XHJcblxyXG5cdFx0X2ZhY2VDb3VudCA9IDA7XHJcblx0XHRfbGluZUNvdW50ID0gMDtcclxuXHRcdF9zcHJpdGVDb3VudCA9IDA7XHJcblxyXG5cdFx0X3JlbmRlckRhdGEuZWxlbWVudHMubGVuZ3RoID0gMDtcclxuXHJcblx0XHRpZiAoIHNjZW5lLmF1dG9VcGRhdGUgPT09IHRydWUgKSBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cdFx0aWYgKCBjYW1lcmEucGFyZW50ID09PSBudWxsICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcblxyXG5cdFx0X3ZpZXdNYXRyaXguY29weSggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKCBjYW1lcmEubWF0cml4V29ybGQgKSApO1xyXG5cdFx0X3ZpZXdQcm9qZWN0aW9uTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBfdmlld01hdHJpeCApO1xyXG5cclxuXHRcdF9mcnVzdHVtLnNldEZyb21NYXRyaXgoIF92aWV3UHJvamVjdGlvbk1hdHJpeCApO1xyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0X29iamVjdENvdW50ID0gMDtcclxuXHJcblx0XHRfcmVuZGVyRGF0YS5vYmplY3RzLmxlbmd0aCA9IDA7XHJcblx0XHRfcmVuZGVyRGF0YS5saWdodHMubGVuZ3RoID0gMDtcclxuXHJcblx0XHRzY2VuZS50cmF2ZXJzZVZpc2libGUoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xyXG5cclxuXHRcdFx0aWYgKCBvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5MaWdodCApIHtcclxuXHJcblx0XHRcdFx0X3JlbmRlckRhdGEubGlnaHRzLnB1c2goIG9iamVjdCApO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuTWVzaCB8fCBvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5MaW5lIHx8IG9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLlNwcml0ZSApIHtcclxuXHJcblx0XHRcdFx0dmFyIG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xyXG5cclxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRpZiAoIG9iamVjdC5mcnVzdHVtQ3VsbGVkID09PSBmYWxzZSB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdFx0XHRfb2JqZWN0ID0gZ2V0TmV4dE9iamVjdEluUG9vbCgpO1xyXG5cdFx0XHRcdFx0X29iamVjdC5pZCA9IG9iamVjdC5pZDtcclxuXHRcdFx0XHRcdF9vYmplY3Qub2JqZWN0ID0gb2JqZWN0O1xyXG5cclxuXHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XHJcblx0XHRcdFx0XHRfdmVjdG9yMy5hcHBseVByb2plY3Rpb24oIF92aWV3UHJvamVjdGlvbk1hdHJpeCApO1xyXG5cdFx0XHRcdFx0X29iamVjdC56ID0gX3ZlY3RvcjMuejtcclxuXHRcdFx0XHRcdF9vYmplY3QucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XHJcblxyXG5cdFx0XHRcdFx0X3JlbmRlckRhdGEub2JqZWN0cy5wdXNoKCBfb2JqZWN0ICk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9ICk7XHJcblxyXG5cdFx0aWYgKCBzb3J0T2JqZWN0cyA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdF9yZW5kZXJEYXRhLm9iamVjdHMuc29ydCggcGFpbnRlclNvcnQgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRmb3IgKCB2YXIgbyA9IDAsIG9sID0gX3JlbmRlckRhdGEub2JqZWN0cy5sZW5ndGg7IG8gPCBvbDsgbyArKyApIHtcclxuXHJcblx0XHRcdHZhciBvYmplY3QgPSBfcmVuZGVyRGF0YS5vYmplY3RzWyBvIF0ub2JqZWN0O1xyXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XHJcblxyXG5cdFx0XHRyZW5kZXJMaXN0LnNldE9iamVjdCggb2JqZWN0ICk7XHJcblxyXG5cdFx0XHRfbW9kZWxNYXRyaXggPSBvYmplY3QubWF0cml4V29ybGQ7XHJcblxyXG5cdFx0XHRfdmVydGV4Q291bnQgPSAwO1xyXG5cclxuXHRcdFx0aWYgKCBvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5NZXNoICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkgKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xyXG5cdFx0XHRcdFx0dmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcclxuXHJcblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRcdHZhciBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvc2l0aW9ucy5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRyZW5kZXJMaXN0LnB1c2hWZXJ0ZXgoIHBvc2l0aW9uc1sgaSBdLCBwb3NpdGlvbnNbIGkgKyAxIF0sIHBvc2l0aW9uc1sgaSArIDIgXSApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgbm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbm9ybWFscy5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHJlbmRlckxpc3QucHVzaE5vcm1hbCggbm9ybWFsc1sgaSBdLCBub3JtYWxzWyBpICsgMSBdLCBub3JtYWxzWyBpICsgMiBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlcy51diAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHV2cyA9IGF0dHJpYnV0ZXMudXYuYXJyYXk7XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB1dnMubGVuZ3RoOyBpIDwgbDsgaSArPSAyICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRyZW5kZXJMaXN0LnB1c2hVdiggdXZzWyBpIF0sIHV2c1sgaSArIDEgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ICE9PSBudWxsICkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGluZGljZXMgPSBnZW9tZXRyeS5pbmRleC5hcnJheTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggZ3JvdXBzLmxlbmd0aCA+IDAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciBvID0gMDsgbyA8IGdyb3Vwcy5sZW5ndGg7IG8gKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBvIF07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSBncm91cC5zdGFydCwgbCA9IGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQ7IGkgPCBsOyBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZW5kZXJMaXN0LnB1c2hUcmlhbmdsZSggaW5kaWNlc1sgaSBdLCBpbmRpY2VzWyBpICsgMSBdLCBpbmRpY2VzWyBpICsgMiBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMyApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRyZW5kZXJMaXN0LnB1c2hUcmlhbmdsZSggaW5kaWNlc1sgaSBdLCBpbmRpY2VzWyBpICsgMSBdLCBpbmRpY2VzWyBpICsgMiBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7IGkgPCBsOyBpICs9IDMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHJlbmRlckxpc3QucHVzaFRyaWFuZ2xlKCBpLCBpICsgMSwgaSArIDIgKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkgKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XHJcblx0XHRcdFx0XHR2YXIgZmFjZXMgPSBnZW9tZXRyeS5mYWNlcztcclxuXHRcdFx0XHRcdHZhciBmYWNlVmVydGV4VXZzID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgMCBdO1xyXG5cclxuXHRcdFx0XHRcdF9ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCBfbW9kZWxNYXRyaXggKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGlzRmFjZU1hdGVyaWFsID0gbWF0ZXJpYWwgaW5zdGFuY2VvZiBUSFJFRS5NdWx0aU1hdGVyaWFsO1xyXG5cdFx0XHRcdFx0dmFyIG9iamVjdE1hdGVyaWFscyA9IGlzRmFjZU1hdGVyaWFsID09PSB0cnVlID8gb2JqZWN0Lm1hdGVyaWFsIDogbnVsbDtcclxuXHJcblx0XHRcdFx0XHRmb3IgKCB2YXIgdiA9IDAsIHZsID0gdmVydGljZXMubGVuZ3RoOyB2IDwgdmw7IHYgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgdmVydGV4ID0gdmVydGljZXNbIHYgXTtcclxuXHJcblx0XHRcdFx0XHRcdF92ZWN0b3IzLmNvcHkoIHZlcnRleCApO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XHJcblx0XHRcdFx0XHRcdFx0dmFyIG1vcnBoSW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciB0ID0gMCwgdGwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyB0IDwgdGw7IHQgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGluZmx1ZW5jZSA9IG1vcnBoSW5mbHVlbmNlc1sgdCBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW5mbHVlbmNlID09PSAwICkgY29udGludWU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgdCBdO1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHRhcmdldFZlcnRleCA9IHRhcmdldC52ZXJ0aWNlc1sgdiBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdF92ZWN0b3IzLnggKz0gKCB0YXJnZXRWZXJ0ZXgueCAtIHZlcnRleC54ICkgKiBpbmZsdWVuY2U7XHJcblx0XHRcdFx0XHRcdFx0XHRfdmVjdG9yMy55ICs9ICggdGFyZ2V0VmVydGV4LnkgLSB2ZXJ0ZXgueSApICogaW5mbHVlbmNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0X3ZlY3RvcjMueiArPSAoIHRhcmdldFZlcnRleC56IC0gdmVydGV4LnogKSAqIGluZmx1ZW5jZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoVmVydGV4KCBfdmVjdG9yMy54LCBfdmVjdG9yMy55LCBfdmVjdG9yMy56ICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGZvciAoIHZhciBmID0gMCwgZmwgPSBmYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGYgXTtcclxuXHJcblx0XHRcdFx0XHRcdG1hdGVyaWFsID0gaXNGYWNlTWF0ZXJpYWwgPT09IHRydWVcclxuXHRcdFx0XHRcdFx0XHQgPyBvYmplY3RNYXRlcmlhbHMubWF0ZXJpYWxzWyBmYWNlLm1hdGVyaWFsSW5kZXggXVxyXG5cdFx0XHRcdFx0XHRcdCA6IG9iamVjdC5tYXRlcmlhbDtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggbWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHNpZGUgPSBtYXRlcmlhbC5zaWRlO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHYxID0gX3ZlcnRleFBvb2xbIGZhY2UuYSBdO1xyXG5cdFx0XHRcdFx0XHR2YXIgdjIgPSBfdmVydGV4UG9vbFsgZmFjZS5iIF07XHJcblx0XHRcdFx0XHRcdHZhciB2MyA9IF92ZXJ0ZXhQb29sWyBmYWNlLmMgXTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggcmVuZGVyTGlzdC5jaGVja1RyaWFuZ2xlVmlzaWJpbGl0eSggdjEsIHYyLCB2MyApID09PSBmYWxzZSApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHZpc2libGUgPSByZW5kZXJMaXN0LmNoZWNrQmFja2ZhY2VDdWxsaW5nKCB2MSwgdjIsIHYzICk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIHNpZGUgIT09IFRIUkVFLkRvdWJsZVNpZGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggc2lkZSA9PT0gVEhSRUUuRnJvbnRTaWRlICYmIHZpc2libGUgPT09IGZhbHNlICkgY29udGludWU7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBzaWRlID09PSBUSFJFRS5CYWNrU2lkZSAmJiB2aXNpYmxlID09PSB0cnVlICkgY29udGludWU7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRfZmFjZSA9IGdldE5leHRGYWNlSW5Qb29sKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRfZmFjZS5pZCA9IG9iamVjdC5pZDtcclxuXHRcdFx0XHRcdFx0X2ZhY2UudjEuY29weSggdjEgKTtcclxuXHRcdFx0XHRcdFx0X2ZhY2UudjIuY29weSggdjIgKTtcclxuXHRcdFx0XHRcdFx0X2ZhY2UudjMuY29weSggdjMgKTtcclxuXHJcblx0XHRcdFx0XHRcdF9mYWNlLm5vcm1hbE1vZGVsLmNvcHkoIGZhY2Uubm9ybWFsICk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIHZpc2libGUgPT09IGZhbHNlICYmICggc2lkZSA9PT0gVEhSRUUuQmFja1NpZGUgfHwgc2lkZSA9PT0gVEhSRUUuRG91YmxlU2lkZSApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRfZmFjZS5ub3JtYWxNb2RlbC5uZWdhdGUoKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdF9mYWNlLm5vcm1hbE1vZGVsLmFwcGx5TWF0cml4MyggX25vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGZhY2VWZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIG4gPSAwLCBubCA9IE1hdGgubWluKCBmYWNlVmVydGV4Tm9ybWFscy5sZW5ndGgsIDMgKTsgbiA8IG5sOyBuICsrICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgbm9ybWFsTW9kZWwgPSBfZmFjZS52ZXJ0ZXhOb3JtYWxzTW9kZWxbIG4gXTtcclxuXHRcdFx0XHRcdFx0XHRub3JtYWxNb2RlbC5jb3B5KCBmYWNlVmVydGV4Tm9ybWFsc1sgbiBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggdmlzaWJsZSA9PT0gZmFsc2UgJiYgKCBzaWRlID09PSBUSFJFRS5CYWNrU2lkZSB8fCBzaWRlID09PSBUSFJFRS5Eb3VibGVTaWRlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsTW9kZWwubmVnYXRlKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0bm9ybWFsTW9kZWwuYXBwbHlNYXRyaXgzKCBfbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRfZmFjZS52ZXJ0ZXhOb3JtYWxzTGVuZ3RoID0gZmFjZVZlcnRleE5vcm1hbHMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHZlcnRleFV2cyA9IGZhY2VWZXJ0ZXhVdnNbIGYgXTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggdmVydGV4VXZzICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciB1ID0gMDsgdSA8IDM7IHUgKysgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0X2ZhY2UudXZzWyB1IF0uY29weSggdmVydGV4VXZzWyB1IF0gKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0X2ZhY2UuY29sb3IgPSBmYWNlLmNvbG9yO1xyXG5cdFx0XHRcdFx0XHRfZmFjZS5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG5cclxuXHRcdFx0XHRcdFx0X2ZhY2UueiA9ICggdjEucG9zaXRpb25TY3JlZW4ueiArIHYyLnBvc2l0aW9uU2NyZWVuLnogKyB2My5wb3NpdGlvblNjcmVlbi56ICkgLyAzO1xyXG5cdFx0XHRcdFx0XHRfZmFjZS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcclxuXHJcblx0XHRcdFx0XHRcdF9yZW5kZXJEYXRhLmVsZW1lbnRzLnB1c2goIF9mYWNlICk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5MaW5lICkge1xyXG5cclxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkgKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSArPSAzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRyZW5kZXJMaXN0LnB1c2hWZXJ0ZXgoIHBvc2l0aW9uc1sgaSBdLCBwb3NpdGlvbnNbIGkgKyAxIF0sIHBvc2l0aW9uc1sgaSArIDIgXSApO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIGluZGljZXMgPSBnZW9tZXRyeS5pbmRleC5hcnJheTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoTGluZSggaW5kaWNlc1sgaSBdLCBpbmRpY2VzWyBpICsgMSBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBzdGVwID0gb2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuTGluZVNlZ21lbnRzID8gMiA6IDE7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9ICggcG9zaXRpb25zLmxlbmd0aCAvIDMgKSAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoTGluZSggaSwgaSArIDEgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeSApIHtcclxuXHJcblx0XHRcdFx0XHRfbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBfdmlld1Byb2plY3Rpb25NYXRyaXgsIF9tb2RlbE1hdHJpeCApO1xyXG5cclxuXHRcdFx0XHRcdHZhciB2ZXJ0aWNlcyA9IG9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcztcclxuXHJcblx0XHRcdFx0XHRpZiAoIHZlcnRpY2VzLmxlbmd0aCA9PT0gMCApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRcdHYxID0gZ2V0TmV4dFZlcnRleEluUG9vbCgpO1xyXG5cdFx0XHRcdFx0djEucG9zaXRpb25TY3JlZW4uY29weSggdmVydGljZXNbIDAgXSApLmFwcGx5TWF0cml4NCggX21vZGVsVmlld1Byb2plY3Rpb25NYXRyaXggKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgc3RlcCA9IG9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLkxpbmVTZWdtZW50cyA/IDIgOiAxO1xyXG5cclxuXHRcdFx0XHRcdGZvciAoIHZhciB2ID0gMSwgdmwgPSB2ZXJ0aWNlcy5sZW5ndGg7IHYgPCB2bDsgdiArKyApIHtcclxuXHJcblx0XHRcdFx0XHRcdHYxID0gZ2V0TmV4dFZlcnRleEluUG9vbCgpO1xyXG5cdFx0XHRcdFx0XHR2MS5wb3NpdGlvblNjcmVlbi5jb3B5KCB2ZXJ0aWNlc1sgdiBdICkuYXBwbHlNYXRyaXg0KCBfbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCApO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCAoIHYgKyAxICkgJSBzdGVwID4gMCApIGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0djIgPSBfdmVydGV4UG9vbFsgX3ZlcnRleENvdW50IC0gMiBdO1xyXG5cclxuXHRcdFx0XHRcdFx0X2NsaXBwZWRWZXJ0ZXgxUG9zaXRpb25TY3JlZW4uY29weSggdjEucG9zaXRpb25TY3JlZW4gKTtcclxuXHRcdFx0XHRcdFx0X2NsaXBwZWRWZXJ0ZXgyUG9zaXRpb25TY3JlZW4uY29weSggdjIucG9zaXRpb25TY3JlZW4gKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggY2xpcExpbmUoIF9jbGlwcGVkVmVydGV4MVBvc2l0aW9uU2NyZWVuLCBfY2xpcHBlZFZlcnRleDJQb3NpdGlvblNjcmVlbiApID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBQZXJmb3JtIHRoZSBwZXJzcGVjdGl2ZSBkaXZpZGVcclxuXHRcdFx0XHRcdFx0XHRfY2xpcHBlZFZlcnRleDFQb3NpdGlvblNjcmVlbi5tdWx0aXBseVNjYWxhciggMSAvIF9jbGlwcGVkVmVydGV4MVBvc2l0aW9uU2NyZWVuLncgKTtcclxuXHRcdFx0XHRcdFx0XHRfY2xpcHBlZFZlcnRleDJQb3NpdGlvblNjcmVlbi5tdWx0aXBseVNjYWxhciggMSAvIF9jbGlwcGVkVmVydGV4MlBvc2l0aW9uU2NyZWVuLncgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0X2xpbmUgPSBnZXROZXh0TGluZUluUG9vbCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRfbGluZS5pZCA9IG9iamVjdC5pZDtcclxuXHRcdFx0XHRcdFx0XHRfbGluZS52MS5wb3NpdGlvblNjcmVlbi5jb3B5KCBfY2xpcHBlZFZlcnRleDFQb3NpdGlvblNjcmVlbiApO1xyXG5cdFx0XHRcdFx0XHRcdF9saW5lLnYyLnBvc2l0aW9uU2NyZWVuLmNvcHkoIF9jbGlwcGVkVmVydGV4MlBvc2l0aW9uU2NyZWVuICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdF9saW5lLnogPSBNYXRoLm1heCggX2NsaXBwZWRWZXJ0ZXgxUG9zaXRpb25TY3JlZW4ueiwgX2NsaXBwZWRWZXJ0ZXgyUG9zaXRpb25TY3JlZW4ueiApO1xyXG5cdFx0XHRcdFx0XHRcdF9saW5lLnJlbmRlck9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRfbGluZS5tYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCBvYmplY3QubWF0ZXJpYWwudmVydGV4Q29sb3JzID09PSBUSFJFRS5WZXJ0ZXhDb2xvcnMgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0X2xpbmUudmVydGV4Q29sb3JzWyAwIF0uY29weSggb2JqZWN0Lmdlb21ldHJ5LmNvbG9yc1sgdiBdICk7XHJcblx0XHRcdFx0XHRcdFx0XHRfbGluZS52ZXJ0ZXhDb2xvcnNbIDEgXS5jb3B5KCBvYmplY3QuZ2VvbWV0cnkuY29sb3JzWyB2IC0gMSBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0X3JlbmRlckRhdGEuZWxlbWVudHMucHVzaCggX2xpbmUgKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLlNwcml0ZSApIHtcclxuXHJcblx0XHRcdFx0X3ZlY3RvcjQuc2V0KCBfbW9kZWxNYXRyaXguZWxlbWVudHNbIDEyIF0sIF9tb2RlbE1hdHJpeC5lbGVtZW50c1sgMTMgXSwgX21vZGVsTWF0cml4LmVsZW1lbnRzWyAxNCBdLCAxICk7XHJcblx0XHRcdFx0X3ZlY3RvcjQuYXBwbHlNYXRyaXg0KCBfdmlld1Byb2plY3Rpb25NYXRyaXggKTtcclxuXHJcblx0XHRcdFx0dmFyIGludlcgPSAxIC8gX3ZlY3RvcjQudztcclxuXHJcblx0XHRcdFx0X3ZlY3RvcjQueiAqPSBpbnZXO1xyXG5cclxuXHRcdFx0XHRpZiAoIF92ZWN0b3I0LnogPj0gLSAxICYmIF92ZWN0b3I0LnogPD0gMSApIHtcclxuXHJcblx0XHRcdFx0XHRfc3ByaXRlID0gZ2V0TmV4dFNwcml0ZUluUG9vbCgpO1xyXG5cdFx0XHRcdFx0X3Nwcml0ZS5pZCA9IG9iamVjdC5pZDtcclxuXHRcdFx0XHRcdF9zcHJpdGUueCA9IF92ZWN0b3I0LnggKiBpbnZXO1xyXG5cdFx0XHRcdFx0X3Nwcml0ZS55ID0gX3ZlY3RvcjQueSAqIGludlc7XHJcblx0XHRcdFx0XHRfc3ByaXRlLnogPSBfdmVjdG9yNC56O1xyXG5cdFx0XHRcdFx0X3Nwcml0ZS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcclxuXHRcdFx0XHRcdF9zcHJpdGUub2JqZWN0ID0gb2JqZWN0O1xyXG5cclxuXHRcdFx0XHRcdF9zcHJpdGUucm90YXRpb24gPSBvYmplY3Qucm90YXRpb247XHJcblxyXG5cdFx0XHRcdFx0X3Nwcml0ZS5zY2FsZS54ID0gb2JqZWN0LnNjYWxlLnggKiBNYXRoLmFicyggX3Nwcml0ZS54IC0gKCBfdmVjdG9yNC54ICsgY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDAgXSApIC8gKCBfdmVjdG9yNC53ICsgY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDEyIF0gKSApO1xyXG5cdFx0XHRcdFx0X3Nwcml0ZS5zY2FsZS55ID0gb2JqZWN0LnNjYWxlLnkgKiBNYXRoLmFicyggX3Nwcml0ZS55IC0gKCBfdmVjdG9yNC55ICsgY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDUgXSApIC8gKCBfdmVjdG9yNC53ICsgY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDEzIF0gKSApO1xyXG5cclxuXHRcdFx0XHRcdF9zcHJpdGUubWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XHJcblxyXG5cdFx0XHRcdFx0X3JlbmRlckRhdGEuZWxlbWVudHMucHVzaCggX3Nwcml0ZSApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc29ydEVsZW1lbnRzID09PSB0cnVlICkge1xyXG5cclxuXHRcdFx0X3JlbmRlckRhdGEuZWxlbWVudHMuc29ydCggcGFpbnRlclNvcnQgKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIF9yZW5kZXJEYXRhO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvLyBQb29sc1xyXG5cclxuXHRmdW5jdGlvbiBnZXROZXh0T2JqZWN0SW5Qb29sKCkge1xyXG5cclxuXHRcdGlmICggX29iamVjdENvdW50ID09PSBfb2JqZWN0UG9vbExlbmd0aCApIHtcclxuXHJcblx0XHRcdHZhciBvYmplY3QgPSBuZXcgVEhSRUUuUmVuZGVyYWJsZU9iamVjdCgpO1xyXG5cdFx0XHRfb2JqZWN0UG9vbC5wdXNoKCBvYmplY3QgKTtcclxuXHRcdFx0X29iamVjdFBvb2xMZW5ndGggKys7XHJcblx0XHRcdF9vYmplY3RDb3VudCArKztcclxuXHRcdFx0cmV0dXJuIG9iamVjdDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIF9vYmplY3RQb29sWyBfb2JqZWN0Q291bnQgKysgXTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXROZXh0VmVydGV4SW5Qb29sKCkge1xyXG5cclxuXHRcdGlmICggX3ZlcnRleENvdW50ID09PSBfdmVydGV4UG9vbExlbmd0aCApIHtcclxuXHJcblx0XHRcdHZhciB2ZXJ0ZXggPSBuZXcgVEhSRUUuUmVuZGVyYWJsZVZlcnRleCgpO1xyXG5cdFx0XHRfdmVydGV4UG9vbC5wdXNoKCB2ZXJ0ZXggKTtcclxuXHRcdFx0X3ZlcnRleFBvb2xMZW5ndGggKys7XHJcblx0XHRcdF92ZXJ0ZXhDb3VudCArKztcclxuXHRcdFx0cmV0dXJuIHZlcnRleDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIF92ZXJ0ZXhQb29sWyBfdmVydGV4Q291bnQgKysgXTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXROZXh0RmFjZUluUG9vbCgpIHtcclxuXHJcblx0XHRpZiAoIF9mYWNlQ291bnQgPT09IF9mYWNlUG9vbExlbmd0aCApIHtcclxuXHJcblx0XHRcdHZhciBmYWNlID0gbmV3IFRIUkVFLlJlbmRlcmFibGVGYWNlKCk7XHJcblx0XHRcdF9mYWNlUG9vbC5wdXNoKCBmYWNlICk7XHJcblx0XHRcdF9mYWNlUG9vbExlbmd0aCArKztcclxuXHRcdFx0X2ZhY2VDb3VudCArKztcclxuXHRcdFx0cmV0dXJuIGZhY2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBfZmFjZVBvb2xbIF9mYWNlQ291bnQgKysgXTtcclxuXHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0TmV4dExpbmVJblBvb2woKSB7XHJcblxyXG5cdFx0aWYgKCBfbGluZUNvdW50ID09PSBfbGluZVBvb2xMZW5ndGggKSB7XHJcblxyXG5cdFx0XHR2YXIgbGluZSA9IG5ldyBUSFJFRS5SZW5kZXJhYmxlTGluZSgpO1xyXG5cdFx0XHRfbGluZVBvb2wucHVzaCggbGluZSApO1xyXG5cdFx0XHRfbGluZVBvb2xMZW5ndGggKys7XHJcblx0XHRcdF9saW5lQ291bnQgKys7XHJcblx0XHRcdHJldHVybiBsaW5lO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gX2xpbmVQb29sWyBfbGluZUNvdW50ICsrIF07XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0TmV4dFNwcml0ZUluUG9vbCgpIHtcclxuXHJcblx0XHRpZiAoIF9zcHJpdGVDb3VudCA9PT0gX3Nwcml0ZVBvb2xMZW5ndGggKSB7XHJcblxyXG5cdFx0XHR2YXIgc3ByaXRlID0gbmV3IFRIUkVFLlJlbmRlcmFibGVTcHJpdGUoKTtcclxuXHRcdFx0X3Nwcml0ZVBvb2wucHVzaCggc3ByaXRlICk7XHJcblx0XHRcdF9zcHJpdGVQb29sTGVuZ3RoICsrO1xyXG5cdFx0XHRfc3ByaXRlQ291bnQgKys7XHJcblx0XHRcdHJldHVybiBzcHJpdGU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBfc3ByaXRlUG9vbFsgX3Nwcml0ZUNvdW50ICsrIF07XHJcblxyXG5cdH1cclxuXHJcblx0Ly9cclxuXHJcblx0ZnVuY3Rpb24gcGFpbnRlclNvcnQoIGEsIGIgKSB7XHJcblxyXG5cdFx0aWYgKCBhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIGEueiAhPT0gYi56ICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGIueiAtIGEuejtcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBhLmlkICE9PSBiLmlkICkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGEuaWQgLSBiLmlkO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY2xpcExpbmUoIHMxLCBzMiApIHtcclxuXHJcblx0XHR2YXIgYWxwaGExID0gMCwgYWxwaGEyID0gMSxcclxuXHJcblx0XHQvLyBDYWxjdWxhdGUgdGhlIGJvdW5kYXJ5IGNvb3JkaW5hdGUgb2YgZWFjaCB2ZXJ0ZXggZm9yIHRoZSBuZWFyIGFuZCBmYXIgY2xpcCBwbGFuZXMsXHJcblx0XHQvLyBaID0gLTEgYW5kIFogPSArMSwgcmVzcGVjdGl2ZWx5LlxyXG5cdFx0YmMxbmVhciA9ICBzMS56ICsgczEudyxcclxuXHRcdGJjMm5lYXIgPSAgczIueiArIHMyLncsXHJcblx0XHRiYzFmYXIgPSAgLSBzMS56ICsgczEudyxcclxuXHRcdGJjMmZhciA9ICAtIHMyLnogKyBzMi53O1xyXG5cclxuXHRcdGlmICggYmMxbmVhciA+PSAwICYmIGJjMm5lYXIgPj0gMCAmJiBiYzFmYXIgPj0gMCAmJiBiYzJmYXIgPj0gMCApIHtcclxuXHJcblx0XHRcdC8vIEJvdGggdmVydGljZXMgbGllIGVudGlyZWx5IHdpdGhpbiBhbGwgY2xpcCBwbGFuZXMuXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoICggYmMxbmVhciA8IDAgJiYgYmMybmVhciA8IDAgKSB8fCAoIGJjMWZhciA8IDAgJiYgYmMyZmFyIDwgMCApICkge1xyXG5cclxuXHRcdFx0Ly8gQm90aCB2ZXJ0aWNlcyBsaWUgZW50aXJlbHkgb3V0c2lkZSBvbmUgb2YgdGhlIGNsaXAgcGxhbmVzLlxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIFRoZSBsaW5lIHNlZ21lbnQgc3BhbnMgYXQgbGVhc3Qgb25lIGNsaXAgcGxhbmUuXHJcblxyXG5cdFx0XHRpZiAoIGJjMW5lYXIgPCAwICkge1xyXG5cclxuXHRcdFx0XHQvLyB2MSBsaWVzIG91dHNpZGUgdGhlIG5lYXIgcGxhbmUsIHYyIGluc2lkZVxyXG5cdFx0XHRcdGFscGhhMSA9IE1hdGgubWF4KCBhbHBoYTEsIGJjMW5lYXIgLyAoIGJjMW5lYXIgLSBiYzJuZWFyICkgKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGJjMm5lYXIgPCAwICkge1xyXG5cclxuXHRcdFx0XHQvLyB2MiBsaWVzIG91dHNpZGUgdGhlIG5lYXIgcGxhbmUsIHYxIGluc2lkZVxyXG5cdFx0XHRcdGFscGhhMiA9IE1hdGgubWluKCBhbHBoYTIsIGJjMW5lYXIgLyAoIGJjMW5lYXIgLSBiYzJuZWFyICkgKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggYmMxZmFyIDwgMCApIHtcclxuXHJcblx0XHRcdFx0Ly8gdjEgbGllcyBvdXRzaWRlIHRoZSBmYXIgcGxhbmUsIHYyIGluc2lkZVxyXG5cdFx0XHRcdGFscGhhMSA9IE1hdGgubWF4KCBhbHBoYTEsIGJjMWZhciAvICggYmMxZmFyIC0gYmMyZmFyICkgKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGJjMmZhciA8IDAgKSB7XHJcblxyXG5cdFx0XHRcdC8vIHYyIGxpZXMgb3V0c2lkZSB0aGUgZmFyIHBsYW5lLCB2MiBpbnNpZGVcclxuXHRcdFx0XHRhbHBoYTIgPSBNYXRoLm1pbiggYWxwaGEyLCBiYzFmYXIgLyAoIGJjMWZhciAtIGJjMmZhciApICk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGFscGhhMiA8IGFscGhhMSApIHtcclxuXHJcblx0XHRcdFx0Ly8gVGhlIGxpbmUgc2VnbWVudCBzcGFucyB0d28gYm91bmRhcmllcywgYnV0IGlzIG91dHNpZGUgYm90aCBvZiB0aGVtLlxyXG5cdFx0XHRcdC8vIChUaGlzIGNhbid0IGhhcHBlbiB3aGVuIHdlJ3JlIG9ubHkgY2xpcHBpbmcgYWdhaW5zdCBqdXN0IG5lYXIvZmFyIGJ1dCBnb29kXHJcblx0XHRcdFx0Ly8gIHRvIGxlYXZlIHRoZSBjaGVjayBoZXJlIGZvciBmdXR1cmUgdXNhZ2UgaWYgb3RoZXIgY2xpcCBwbGFuZXMgYXJlIGFkZGVkLilcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBVcGRhdGUgdGhlIHMxIGFuZCBzMiB2ZXJ0aWNlcyB0byBtYXRjaCB0aGUgY2xpcHBlZCBsaW5lIHNlZ21lbnQuXHJcblx0XHRcdFx0czEubGVycCggczIsIGFscGhhMSApO1xyXG5cdFx0XHRcdHMyLmxlcnAoIHMxLCAxIC0gYWxwaGEyICk7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufTtcclxuIl19