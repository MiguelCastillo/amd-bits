'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ere = require('../js/ere');

var _three = require('./three.bootstrap');

var _three2 = _interopRequireDefault(_three);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SpecialEffect = (function () {
  function SpecialEffect() {
    _classCallCheck(this, SpecialEffect);

    this.mouseX = 0;
    this.mouseY = 0;

    this.windowHalfX = window.innerWidth / 2;
    this.windowHalfY = window.innerHeight / 2;

    this.camera = new _three2.default.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
    this.camera.position.z = 100;

    this.scene = new _three2.default.Scene();

    this.renderer = new _three2.default.CanvasRenderer({ alpha: true });
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setClearColor(0x000000, 0); // the default   // canvas background color
    this.renderer.setSize(window.innerWidth, window.innerHeight);

    this.container = document.getElementById("canvas");
    this.container.appendChild(this.renderer.domElement);

    this.logo = document.getElementById('bit-imports');
    this.logoMini = document.getElementById('bit-imports-mini');
    this.nav = document.getElementById('nav');

    this.init();
    this.animate();
  }

  _createClass(SpecialEffect, [{
    key: 'init',
    value: function init() {
      var color = 0xffffff;
      var particle;

      // particles

      // var PI2 = Math.PI * 2;
      var material = new _three2.default.SpriteCanvasMaterial({
        color: color,
        opacity: 0.4,
        program: function program(context) {
          context.beginPath();
          // context.arc( 0, 0, 2, 0, PI2, true );
          context.rect(-1.5, -1.5, 3, 3);
          context.fill();
        }
      });

      var geometry = new _three2.default.Geometry();

      // number of particles
      for (var i = 0; i < 150; i++) {
        particle = new _three2.default.Sprite(material);
        particle.position.x = Math.random() * 2 - 1;
        particle.position.y = Math.random() * 2 - 1;
        particle.position.z = Math.random() * 2 - 1;
        particle.position.normalize();
        particle.position.multiplyScalar(Math.random() * 10 + 600);
        particle.scale.x = particle.scale.y = 5;

        this.scene.add(particle);

        geometry.vertices.push(particle.position);
      }

      // lines

      var line = new _three2.default.Line(geometry, new _three2.default.LineBasicMaterial({ color: color, opacity: 0.2 }));
      this.scene.add(line);

      new _ere.Eventing(document).on('mousemove', onDocumentMouseMove.bind(this)).on('touchstart', onDocumentTouchStart.bind(this)).on('touchmove', onDocumentTouchMove.bind(this));

      new _ere.Eventing(window).on('resize', onWindowResize.bind(this)).on('scroll', docScroll.bind(this));
    }
  }, {
    key: 'animate',
    value: function animate() {
      var _this = this;

      requestAnimationFrame(function () {
        _this.animate();
      });
      this.render();
    }
  }, {
    key: 'render',
    value: function render() {
      this.camera.position.x += (this.mouseX - this.camera.position.x) * 0.01;
      this.camera.position.y += (-this.mouseY + 500 - this.camera.position.y) * 0.05;
      this.camera.lookAt(this.scene.position);

      this.renderer.render(this.scene, this.camera);
    }
  }], [{
    key: 'create',
    value: function create() {
      return new SpecialEffect();
    }
  }]);

  return SpecialEffect;
})();

function onWindowResize() {
  this.windowHalfX = window.innerWidth / 2;
  this.windowHalfY = window.innerHeight / 2;

  // camera.aspect = window.innerWidth / window.innerHeight;
  this.camera.aspect = window.innerWidth / 350;
  this.camera.updateProjectionMatrix();

  // renderer.setSize( window.innerWidth, window.innerHeight );
  this.renderer.setSize(window.innerWidth, 350);
}

function onDocumentMouseMove(event) {
  this.mouseX = (event.clientX - this.windowHalfX) * 0.05;
  this.mouseY = (event.clientY - this.windowHalfY) * 0.1;
}

function onDocumentTouchStart(event) {
  if (event.touches.length > 1) {
    event.preventDefault();
    this.mouseX = (event.touches[0].pageX - this.windowHalfX) * 0.7;
    this.mouseY = (event.touches[0].pageY - this.windowHalfY) * 0.7;
  }
}

function onDocumentTouchMove(event) {
  if (event.touches.length == 1) {
    event.preventDefault();
    this.mouseX = event.touches[0].pageX - this.windowHalfX;
    this.mouseY = event.touches[0].pageY - this.windowHalfY;
  }
}

function docScroll() {
  var logoTop = this.logo.getBoundingClientRect().top;
  var logoHeight = this.logo.getBoundingClientRect().height;
  var logoMiniHeight = this.logoMini.getBoundingClientRect().height;
  var navHeight = this.nav.getBoundingClientRect().height;

  if (logoTop < navHeight) {
    var ratio = logoMiniHeight / logoHeight;
    this.logoMini.style.webkitTransform = 'translate3d(0,' + logoTop / ratio + 'px,0)';
    this.logoMini.style.transform = 'translate3d(0,' + logoTop / ratio + 'px,0)';
  }

  if (logoTop > navHeight) {
    this.logoMini.style.webkitTransform = 'translate3d(0,100%,0)';
    this.logoMini.style.transform = 'translate3d(0,100%,0)';
  }

  if (logoTop < 0) {
    this.logoMini.style.webkitTransform = 'translate3d(0,0,0)';
    this.logoMini.style.transform = 'translate3d(0,0,0)';
  }
}

exports.default = SpecialEffect;
//# sourceMappingURL=data:application/json;base64,